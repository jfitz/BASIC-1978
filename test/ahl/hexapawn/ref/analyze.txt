Statistics:

Number of lines: 174
Number of valid statements: 193
Number of comments: 7
Number of executable statements: 175

Complexity:

Comment density: 0.036
Comprehension effort: 713
McCabe complexity: 55
Halstead complexity:
 length: 1528
 volume: 7829.417
 difficulty: 95.789
 effort: 749975.730
 language: 0.853
 intelligence: 81.736
 time: 694.422

1 (0 4) PRINT TAB(32); "HEXAPAWN"
  Origs: :start
  Dests: 2:auto
2 (0 4) PRINT TAB(15); "CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
  Origs: 1:auto
  Dests: 3:auto
3 (0 2) PRINT
  (0 2) PRINT
  (0 2) PRINT
  Origs: 2:auto
  Dests: 10:auto
4 (0 1) REM  HEXAPAWN:  INTERPRETATION OF HEXAPAWN GAME AS PRESENTED IN
  Origs: 
  Dests: 
5 (0 1) REM  MARTIN GARDNER'S "THE UNEXPECTED HANGING AND OTHER MATHEMATIC-
  Origs: 
  Dests: 
6 (0 1) REM  AL DIVERSIONS", CHAPTER EIGHT:  A MATCHBOX GAME-LEARNING MACHINE
  Origs: 
  Dests: 
7 (0 1) REM  ORIGINAL VERSION FOR H-P TIMESHARE SYSTEM BY R.A. KAAPKE 5/5/76
  Origs: 
  Dests: 
8 (0 1) REM  INSTRUCTIONS BY JEFF DALTON
  Origs: 
  Dests: 
9 (0 1) REM  CONVERSION TO MITS BASIC BY STEVE NORTH
  Origs: 
  Dests: 
10 (0 5) DIM B(19, 9), M(19, 4), S(9), P$(3)
  Origs: 3:auto
  Dests: 15:auto
15 (0 3) W = 0
   (0 3) L = 0
  Origs: 10:auto
  Dests: 35:auto
20 FNR(_) (0 32) DEF FNR(X) = -3 * (X = 1) - (X = 3) - 4 * (X = 6) - 6 * (X = 4) - 7 * (X = 9) - 9 * (X = 7) + FNS(X)
  Origs: 
  Dests: 
25 FNS(_) (0 12) DEF FNS(X) = -X * (X = 2 OR X = 5 OR X = 8)
  Origs: 
  Dests: 
30 FNM(_) (0 6) DEF FNM(Y) = Y - INT(Y / 10) * 10
  Origs: 
  Dests: 
35 (0 3) P$ = "X.O"
  Origs: 15:auto
  Dests: 40:auto
40 F(I) (1 3) FOR I = 1 TO 19
   F(I,J) (1 3) FOR J = 1 TO 9
   F(I,J) (1 2) READ B(I, J)
   F(I,J) (0 1) NEXT J
   F(I) (0 1) NEXT I
  Origs: 35:auto
  Dests: 45:auto
45 F(I) (1 3) FOR I = 1 TO 19
   F(I,J) (1 3) FOR J = 1 TO 4
   F(I,J) (1 2) READ M(I, J)
   F(I,J) (0 1) NEXT J
   F(I) (0 1) NEXT I
  Origs: 40:auto
  Dests: 50:auto
50 (0 2) PRINT "INSTRUCTIONS (Y-N)";
  Origs: 45:auto, 90:ifthen
  Dests: 60:auto
60 (1 2) INPUT A$
  Origs: 50:auto
  Dests: 70:auto
70 (0 4) A$ = LEFT$(A$, 1)
  Origs: 60:auto
  Dests: 80:auto
80 (1 4) IF A$ = "Y" THEN 2000
  Origs: 70:auto
  Dests: 90:auto, 2000:ifthen
90 (1 5) IF A$ <> "N" THEN 50
  Origs: 80:auto
  Dests: 50:ifthen, 100:auto
100 F(I) (0 3) X = 0
    F(I) (0 3) Y = 0
  Origs: 90:auto, 860:goto, 2220:goto
  Dests: 111:auto
111 F(I) (0 3) S(4) = 0
    F(I) (0 3) S(5) = 0
    F(I) (0 3) S(6) = 0
  Origs: 100:auto
  Dests: 112:auto
112 F(I) (0 4) S(1) = -1
    F(I) (0 4) S(2) = -1
    F(I) (0 4) S(3) = -1
  Origs: 111:auto
  Dests: 113:auto
113 F(I) (0 3) S(7) = 1
    F(I) (0 3) S(8) = 1
    F(I) (0 3) S(9) = 1
  Origs: 112:auto
  Dests: 115:auto
115 F(I) (0 2) GOSUB 1000
  Origs: 113:auto
  Dests: 120:auto, 1000:gosub
120 F(I) (0 2) PRINT "YOUR MOVE";
  Origs: 115:auto, 124:goto, 140:goto, 710:ifthen, 740:ifthen, 760:ifthen, 780:ifthen
  Dests: 121:auto
121 F(I) (2 3) INPUT M1, M2
  Origs: 120:auto
  Dests: 122:auto
122 F(I) (1 21) IF M1 = INT(M1) AND M2 = INT(M2) AND M1 > 0 AND M1 < 10 AND M2 > 0 AND M2 < 10 THEN 130
  Origs: 121:auto
  Dests: 123:auto, 130:ifthen
123 F(I) (0 2) PRINT "ILLEGAL CO-ORDINATES."
  Origs: 122:auto
  Dests: 124:auto
124 F(I) (0 3) GOTO 120
  Origs: 123:auto
  Dests: 120:goto
130 F(I) (1 4) IF S(M1) = 1 THEN 150
  Origs: 122:ifthen
  Dests: 140:auto, 150:ifthen
140 F(I) (0 2) PRINT "ILLEGAL MOVE."
    F(I) (0 3) GOTO 120
  Origs: 130:auto, 150:ifthen, 160:ifthen, 170:ifthen, 180:ifthen, 185:ifthen, 186:ifthen
  Dests: 120:goto
150 F(I) (1 5) IF S(M2) = 1 THEN 140
  Origs: 130:ifthen
  Dests: 140:ifthen, 160:auto
160 F(I) (1 13) IF M2 - M1 <> -3 AND S(M2) <> -1 THEN 140
  Origs: 150:auto
  Dests: 140:ifthen, 170:auto
170 F(I) (1 5) IF M2 > M1 THEN 140
  Origs: 160:auto
  Dests: 140:ifthen, 180:auto
180 F(I) (1 11) IF M2 - M1 = -3 AND (S(M2) <> 0) THEN 140
  Origs: 170:auto
  Dests: 140:ifthen, 185:auto
185 F(I) (1 8) IF M2 - M1 < -4 THEN 140
  Origs: 180:auto
  Dests: 140:ifthen, 186:auto
186 F(I) (1 8) IF M1 = 7 AND M2 = 3 THEN 140
  Origs: 185:auto
  Dests: 140:ifthen, 190:auto
190 F(I) (0 3) S(M1) = 0
  Origs: 186:auto
  Dests: 200:auto
200 F(I) (0 3) S(M2) = 1
  Origs: 190:auto
  Dests: 205:auto
205 F(I) (0 2) GOSUB 1000
  Origs: 200:auto
  Dests: 210:auto, 1000:gosub
210 F(I) (1 10) IF S(1) = 1 OR S(2) = 1 OR S(3) = 1 THEN 820
  Origs: 205:auto
  Dests: 220:auto, 820:ifthen
220 F(I) (1 3) FOR I = 1 TO 9
  Origs: 210:auto
  Dests: 221:fornext, 222:fornext
221 F(I) (1 6) IF S(I) = -1 THEN 230
  Origs: 220:fornext
  Dests: 222:auto, 230:ifthen
222 F(I) (0 1) NEXT I
  Origs: 220:fornext, 221:auto
  Dests: 223:auto
223 (0 2) GOTO 820
  Origs: 222:auto
  Dests: 820:goto
230 F(I,I) (1 3) FOR I = 1 TO 9
  Origs: 221:ifthen
  Dests: 240:fornext, 330:fornext
240 F(I) (1 6) IF S(I) <> -1 THEN 330
  Origs: 230:fornext
  Dests: 250:auto, 330:ifthen
250 F(I) (1 4) IF S(I + 3) = 0 THEN 350
  Origs: 240:auto
  Dests: 260:auto, 350:ifthen
260 F(I) (1 6) IF FNR(I) = I THEN 320
  Origs: 250:auto
  Dests: 270:auto, 320:ifthen
270 F(I) (1 4) IF I > 3 THEN 300
  Origs: 260:auto
  Dests: 280:auto, 300:ifthen
280 F(I) (1 4) IF S(5) = 1 THEN 350
  Origs: 270:auto
  Dests: 290:auto, 350:ifthen
290 F(I) (0 2) GOTO 330
  Origs: 280:auto
  Dests: 330:goto
300 F(I) (1 4) IF S(8) = 1 THEN 350
  Origs: 270:ifthen
  Dests: 310:auto, 350:ifthen
310 F(I) (0 2) GOTO 330
  Origs: 300:auto
  Dests: 330:goto
320 F(I) (1 7) IF S(I + 2) = 1 OR S(I + 4) = 1 THEN 350
  Origs: 260:ifthen
  Dests: 330:auto, 350:ifthen
330 F(I) (0 1) NEXT I
  Origs: 230:fornext, 240:ifthen, 290:goto, 310:goto, 320:auto
  Dests: 340:auto
340 F(I) (0 2) GOTO 820
  Origs: 330:auto
  Dests: 820:goto
350 F(I,I) (1 3) FOR I = 1 TO 19
  Origs: 250:ifthen, 280:ifthen, 300:ifthen, 320:ifthen
  Dests: 360:fornext, 510:fornext
360 F(I,J) (1 3) FOR J = 1 TO 3
  Origs: 350:fornext
  Dests: 370:fornext, 400:fornext
370 F(I,J,K) (1 5) FOR K = 3 TO 1 STEP -1
  Origs: 360:fornext
  Dests: 380:fornext, 390:fornext
380 F(I,J,K) (0 3) T((J - 1) * 3 + K) = B(I, (J - 1) * 3 + 4 - K)
  Origs: 370:fornext
  Dests: 390:auto
390 F(I,J,K) (0 1) NEXT K
  Origs: 370:fornext, 380:auto
  Dests: 400:auto
400 F(I,J) (0 1) NEXT J
  Origs: 360:fornext, 390:auto
  Dests: 410:auto
410 F(I,J) (1 3) FOR J = 1 TO 9
  Origs: 400:auto
  Dests: 420:fornext, 430:fornext
420 F(I,J) (1 4) IF S(J) <> B(I, J) THEN 460
  Origs: 410:fornext
  Dests: 430:auto, 460:ifthen
430 F(I,J) (0 1) NEXT J
  Origs: 410:fornext, 420:auto
  Dests: 440:auto
440 F(I) (0 3) R = 0
  Origs: 430:auto
  Dests: 450:auto
450 F(I) (0 2) GOTO 540
  Origs: 440:auto
  Dests: 540:goto
460 F(I,J,J) (1 3) FOR J = 1 TO 9
  Origs: 420:ifthen
  Dests: 470:fornext, 480:fornext
470 F(I,J) (1 4) IF S(J) <> T(J) THEN 510
  Origs: 460:fornext
  Dests: 480:auto, 510:ifthen
480 F(I,J) (0 1) NEXT J
  Origs: 460:fornext, 470:auto
  Dests: 490:auto
490 F(I) (0 3) R = 1
  Origs: 480:auto
  Dests: 500:auto
500 F(I) (0 2) GOTO 540
  Origs: 490:auto
  Dests: 540:goto
510 F(I,J) (0 1) NEXT I
  Origs: 350:fornext, 470:ifthen
  Dests: 512:auto
511 (0 1) REM EMBER THE TERMINATION OF THIS LOOP IS IMPOSSIBLE
  Origs: 
  Dests: 
512 F(I,J) (0 2) PRINT "ILLEGAL BOARD PATTERN."
  Origs: 510:auto
  Dests: 530:auto
530 F(I,J) (0 1) STOP
    WARNING: Terminating statement in FOR/NEXT
  Origs: 512:auto
  Dests: :stop
540 F(I) (0 3) X = I
  Origs: 450:goto, 500:goto
  Dests: 550:auto
550 F(I,I) (1 3) FOR I = 1 TO 4
  Origs: 540:auto
  Dests: 560:fornext, 570:fornext
560 F(I) (1 4) IF M(X, I) <> 0 THEN 600
  Origs: 550:fornext
  Dests: 570:auto, 600:ifthen
570 F(I) (0 1) NEXT I
  Origs: 550:fornext, 560:auto
  Dests: 580:auto
580 F(I) (0 2) PRINT "I RESIGN."
  Origs: 570:auto
  Dests: 590:auto
590 F(I) (0 2) GOTO 820
  Origs: 580:auto
  Dests: 820:goto
600 F(I) (0 4) Y = INT(RND(1) * 4 + 1)
  Origs: 560:ifthen, 601:ifthen
  Dests: 601:auto
601 F(I) (1 5) IF M(X, Y) = 0 THEN 600
  Origs: 600:auto
  Dests: 600:ifthen, 610:auto
610 F(I) (1 4) IF R <> 0 THEN 630
  Origs: 601:auto
  Dests: 620:auto, 630:ifthen
620 F(I) (0 7) PRINT "I MOVE FROM "; STR$(INT(M(X, Y) / 10)); " TO "; STR$(FNM(M(X, Y)))
  Origs: 610:auto
  Dests: 622:auto
622 F(I) (0 3) S(INT(M(X, Y) / 10)) = 0
  Origs: 620:auto
  Dests: 623:auto
623 F(I) (0 4) S(FNM(M(X, Y))) = -1
  Origs: 622:auto
  Dests: 624:auto
624 F(I) (0 2) GOTO 640
  Origs: 623:auto
  Dests: 640:goto
630 F(I) (0 5) PRINT "I MOVE FROM "; STR$(FNR(INT(M(X, Y) / 10))); " TO ";
  Origs: 610:ifthen
  Dests: 631:auto
631 F(I) (0 3) PRINT STR$(FNR(FNM(M(X, Y))))
  Origs: 630:auto
  Dests: 632:auto
632 F(I) (0 3) S(FNR(INT(M(X, Y) / 10))) = 0
  Origs: 631:auto
  Dests: 633:auto
633 F(I) (0 4) S(FNR(FNM(M(X, Y)))) = -1
  Origs: 632:auto
  Dests: 640:auto
640 F(I) (0 2) GOSUB 1000
  Origs: 624:goto, 633:auto
  Dests: 641:auto, 1000:gosub
641 F(I) (1 16) IF S(7) = -1 OR S(8) = -1 OR S(9) = -1 THEN 870
  Origs: 640:auto
  Dests: 650:auto, 870:ifthen
650 F(I,I) (1 3) FOR I = 1 TO 9
  Origs: 641:auto
  Dests: 660:fornext, 670:fornext
660 F(I) (1 4) IF S(I) = 1 THEN 690
  Origs: 650:fornext
  Dests: 670:auto, 690:ifthen
670 F(I) (0 1) NEXT I
  Origs: 650:fornext, 660:auto
  Dests: 680:auto
680 F(I) (0 2) GOTO 870
  Origs: 670:auto
  Dests: 870:goto
690 F(I,I) (1 3) FOR I = 1 TO 9
  Origs: 660:ifthen
  Dests: 700:fornext, 790:fornext
700 F(I) (1 4) IF S(I) <> 1 THEN 790
  Origs: 690:fornext
  Dests: 710:auto, 790:ifthen
710 F(I) (1 5) IF S(I - 3) = 0 THEN 120
  Origs: 700:auto
  Dests: 120:ifthen, 720:auto
720 F(I) (1 6) IF FNR(I) = I THEN 780
  Origs: 710:auto
  Dests: 730:auto, 780:ifthen
730 F(I) (1 4) IF I < 7 THEN 760
  Origs: 720:auto
  Dests: 740:auto, 760:ifthen
740 F(I) (1 7) IF S(5) = -1 THEN 120
  Origs: 730:auto
  Dests: 120:ifthen, 750:auto
750 F(I) (0 2) GOTO 790
  Origs: 740:auto
  Dests: 790:goto
760 F(I) (1 7) IF S(2) = -1 THEN 120
  Origs: 730:ifthen
  Dests: 120:ifthen, 770:auto
770 F(I) (0 2) GOTO 790
  Origs: 760:auto
  Dests: 790:goto
780 F(I) (1 12) IF S(I - 2) = -1 OR S(I - 4) = -1 THEN 120
  Origs: 720:ifthen
  Dests: 120:ifthen, 790:auto
790 F(I) (0 1) NEXT I
  Origs: 690:fornext, 700:ifthen, 750:goto, 770:goto, 780:auto
  Dests: 800:auto
800 F(I) (0 2) PRINT "YOU CAN'T MOVE, SO ";
  Origs: 790:auto
  Dests: 810:auto
810 F(I) (0 2) GOTO 870
  Origs: 800:auto
  Dests: 870:goto
820 F(I) (0 2) PRINT "YOU WIN."
  Origs: 210:ifthen, 223:goto, 340:goto, 590:goto
  Dests: 830:auto
830 F(I) (0 3) M(X, Y) = 0
  Origs: 820:auto
  Dests: 840:auto
840 F(I) (0 4) L = L + 1
  Origs: 830:auto
  Dests: 850:auto
850 F(I) (0 9) PRINT "I HAVE WON"; W; "AND YOU"; L; "OUT OF"; L + W; "GAMES."
  Origs: 840:auto, 890:goto
  Dests: 851:auto
851 F(I) (0 2) PRINT
  Origs: 850:auto
  Dests: 860:auto
860 F(I) (0 3) GOTO 100
  Origs: 851:auto
  Dests: 100:goto
870 F(I) (0 2) PRINT "I WIN."
  Origs: 641:ifthen, 680:goto, 810:goto
  Dests: 880:auto
880 F(I) (0 4) W = W + 1
  Origs: 870:auto
  Dests: 890:auto
890 F(I) (0 3) GOTO 850
  Origs: 880:auto
  Dests: 850:goto
900 (0 8) DATA -1, -1, -1, 1, 0, 0, 0, 1, 1, -1, -1, -1, 0, 1, 0, 1, 0, 1
  Origs: 
  Dests: 
905 (0 8) DATA -1, 0, -1, -1, 1, 0, 0, 0, 1, 0, -1, -1, 1, -1, 0, 0, 0, 1
  Origs: 
  Dests: 
910 (0 6) DATA -1, 0, -1, 1, 1, 0, 0, 1, 0, -1, -1, 0, 1, 0, 1, 0, 0, 1
  Origs: 
  Dests: 
915 (0 8) DATA 0, -1, -1, 0, -1, 1, 1, 0, 0, 0, -1, -1, -1, 1, 1, 1, 0, 0
  Origs: 
  Dests: 
920 (0 7) DATA -1, 0, -1, -1, 0, 1, 0, 1, 0, 0, -1, -1, 0, 1, 0, 0, 0, 1
  Origs: 
  Dests: 
925 (0 6) DATA 0, -1, -1, 0, 1, 0, 1, 0, 0, -1, 0, -1, 1, 0, 0, 0, 0, 1
  Origs: 
  Dests: 
930 (0 6) DATA 0, 0, -1, -1, -1, 1, 0, 0, 0, -1, 0, 0, 1, 1, 1, 0, 0, 0
  Origs: 
  Dests: 
935 (0 7) DATA 0, -1, 0, -1, 1, 1, 0, 0, 0, -1, 0, 0, -1, -1, 1, 0, 0, 0
  Origs: 
  Dests: 
940 (0 6) DATA 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0, 0, 0, 0
  Origs: 
  Dests: 
945 (0 4) DATA -1, 0, 0, -1, 1, 0, 0, 0, 0
  Origs: 
  Dests: 
950 (0 2) DATA 24, 25, 36, 0, 14, 15, 36, 0, 15, 35, 36, 47, 36, 58, 59, 0
  Origs: 
  Dests: 
955 (0 2) DATA 15, 35, 36, 0, 24, 25, 26, 0, 26, 57, 58, 0
  Origs: 
  Dests: 
960 (0 2) DATA 26, 35, 0, 0, 47, 48, 0, 0, 35, 36, 0, 0, 35, 36, 0, 0
  Origs: 
  Dests: 
965 (0 2) DATA 36, 0, 0, 0, 47, 58, 0, 0, 15, 0, 0, 0
  Origs: 
  Dests: 
970 (0 2) DATA 26, 47, 0, 0, 47, 58, 0, 0, 35, 36, 47, 0, 28, 58, 0, 0, 15, 47, 0, 0
  Origs: 
  Dests: 
1000 G(1000) (0 2) PRINT
  Origs: 115:gosub, 205:gosub, 640:gosub
  Dests: 1010:auto
1010 G(1000) F(I) (1 3) FOR I = 1 TO 3
  Origs: 1000:auto
  Dests: 1020:fornext, 1060:fornext
1020 G(1000) F(I,J) (1 3) FOR J = 1 TO 3
  Origs: 1010:fornext
  Dests: 1030:fornext, 1040:fornext
1030 G(1000) F(I,J) (0 5) PRINT TAB(10); MID$(P$, S((I - 1) * 3 + J) + 2, 1);
  Origs: 1020:fornext
  Dests: 1040:auto
1040 G(1000) F(I,J) (0 1) NEXT J
  Origs: 1020:fornext, 1030:auto
  Dests: 1050:auto
1050 G(1000) F(I) (0 2) PRINT
  Origs: 1040:auto
  Dests: 1060:auto
1060 G(1000) F(I) (0 1) NEXT I
  Origs: 1010:fornext, 1050:auto
  Dests: 1070:auto
1070 G(1000) (0 2) PRINT
  Origs: 1060:auto
  Dests: 1080:auto
1080 G(1000) (0 1) RETURN
  Origs: 1070:auto
  Dests: 
2000 (0 2) PRINT
     (0 2) PRINT "THIS PROGRAM PLAYS THE GAME OF HEXAPAWN."
  Origs: 80:ifthen
  Dests: 2010:auto
2010 (0 2) PRINT "HEXAPAWN IS PLAYED WITH CHESS PAWNS ON A 3 BY 3 BOARD."
  Origs: 2000:auto
  Dests: 2020:auto
2020 (0 2) PRINT "THE PAWNS ARE MOVED AS IN CHESS - ONE SPACE FORWARD TO"
  Origs: 2010:auto
  Dests: 2030:auto
2030 (0 2) PRINT "AN EMPTY SPACE OR ONE SPACE FORWARD AND DIAGONALLY TO"
  Origs: 2020:auto
  Dests: 2040:auto
2040 (0 2) PRINT "CAPTURE AN OPPOSING MAN.  ON THE BOARD, YOUR PAWNS"
  Origs: 2030:auto
  Dests: 2050:auto
2050 (0 2) PRINT "ARE 'O', THE COMPUTER'S PAWNS ARE 'X', AND EMPTY "
  Origs: 2040:auto
  Dests: 2060:auto
2060 (0 2) PRINT "SQUARES ARE '.'.  TO ENTER A MOVE, TYPE THE NUMBER OF"
  Origs: 2050:auto
  Dests: 2070:auto
2070 (0 2) PRINT "THE SQUARE YOU ARE MOVING FROM, FOLLOWED BY THE NUMBER"
  Origs: 2060:auto
  Dests: 2080:auto
2080 (0 2) PRINT "OF THE SQUARE YOU WILL MOVE TO.  THE NUMBERS MUST BE"
  Origs: 2070:auto
  Dests: 2090:auto
2090 (0 2) PRINT "SEPERATED BY A COMMA."
     (0 2) PRINT
  Origs: 2080:auto
  Dests: 2100:auto
2100 (0 2) PRINT "THE COMPUTER STARTS A SERIES OF GAMES KNOWING ONLY WHEN"
  Origs: 2090:auto
  Dests: 2105:auto
2105 (0 2) PRINT "THE GAME IS WON (A DRAW IS IMPOSSIBLE) AND HOW TO MOVE."
  Origs: 2100:auto
  Dests: 2110:auto
2110 (0 2) PRINT "IT HAS NO STRATEGY AT FIRST AND JUST MOVES RANDOMLY."
  Origs: 2105:auto
  Dests: 2120:auto
2120 (0 2) PRINT "HOWEVER, IT LEARNS FROM EACH GAME.  THUS, WINNING BECOMES"
  Origs: 2110:auto
  Dests: 2130:auto
2130 (0 2) PRINT "MORE AND MORE DIFFICULT.  ALSO, TO HELP OFFSET YOUR"
  Origs: 2120:auto
  Dests: 2140:auto
2140 (0 2) PRINT "INITIAL ADVANTAGE, YOU WILL NOT BE TOLD HOW TO WIN THE"
  Origs: 2130:auto
  Dests: 2150:auto
2150 (0 2) PRINT "GAME BUT MUST LEARN THIS BY PLAYING."
  Origs: 2140:auto
  Dests: 2160:auto
2160 (0 2) PRINT
     (0 2) PRINT "THE NUMBERING OF THE BOARD IS AS FOLLOWS:"
  Origs: 2150:auto
  Dests: 2170:auto
2170 (0 4) PRINT TAB(10); "123"
     (0 4) PRINT TAB(10); "456"
     (0 4) PRINT TAB(10); "789"
  Origs: 2160:auto
  Dests: 2180:auto
2180 (0 2) PRINT
     (0 2) PRINT "FOR EXAMPLE, TO MOVE YOUR RIGHTMOST PAWN FORWARD,"
  Origs: 2170:auto
  Dests: 2190:auto
2190 (0 2) PRINT "YOU WOULD TYPE 9,6 IN RESPONSE TO THE QUESTION"
  Origs: 2180:auto
  Dests: 2200:auto
2200 (0 2) PRINT "'YOUR MOVE ?'.  SINCE I'M A GOOD SPORT, YOU'LL ALWAYS"
  Origs: 2190:auto
  Dests: 2210:auto
2210 (0 2) PRINT "GO FIRST."
     (0 2) PRINT
  Origs: 2200:auto
  Dests: 2220:auto
2220 (0 3) GOTO 100
  Origs: 2210:auto
  Dests: 100:goto
9999 (0 1) END
  Origs: 
  Dests: :stop

Unreachable code:

9999: END

