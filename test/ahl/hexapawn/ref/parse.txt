1 PRINT TAB(32);"HEXAPAWN"
 NumericConstant:32
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 TextConstant:"HEXAPAWN"
 CarriageControl:NL
2 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 NumericConstant:15
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 TextConstant:"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 CarriageControl:NL
3 PRINT:PRINT:PRINT
 CarriageControl:NL
 CarriageControl:NL
 CarriageControl:NL
4 REM  HEXAPAWN:  INTERPRETATION OF HEXAPAWN GAME AS PRESENTED IN
 Remark: HEXAPAWN:  INTERPRETATION OF HEXAPAWN GAME AS PRESENTED IN
5 REM  MARTIN GARDNER'S "THE UNEXPECTED HANGING AND OTHER MATHEMATIC-
 Remark: MARTIN GARDNER'S "THE UNEXPECTED HANGING AND OTHER MATHEMATIC-
6 REM  AL DIVERSIONS", CHAPTER EIGHT:  A MATCHBOX GAME-LEARNING MACHINE
 Remark: AL DIVERSIONS", CHAPTER EIGHT:  A MATCHBOX GAME-LEARNING MACHINE
7 REM  ORIGINAL VERSION FOR H-P TIMESHARE SYSTEM BY R.A. KAAPKE 5/5/76
 Remark: ORIGINAL VERSION FOR H-P TIMESHARE SYSTEM BY R.A. KAAPKE 5/5/76
8 REM  INSTRUCTIONS BY JEFF DALTON
 Remark: INSTRUCTIONS BY JEFF DALTON
9 REM  CONVERSION TO MITS BASIC BY STEVE NORTH
 Remark: CONVERSION TO MITS BASIC BY STEVE NORTH
10 DIM B(19,9),M(19,4),S(9),P$(3)
 NumericConstant:19
 NumericConstant:9
 Declaration:B(,) -> _(,)
 NumericConstant:19
 NumericConstant:4
 Declaration:M(,) -> _(,)
 NumericConstant:9
 Declaration:S() -> _()
 NumericConstant:3
 Declaration:P$() -> $()
15 W=0: L=0
 Variable:W -> _
 NumericConstant:0
 AssignmentOperator:=
 Variable:L -> _
 NumericConstant:0
 AssignmentOperator:=
20 DEF FNR(X)=-3*(X=1)-(X=3)-4*(X=6)-6*(X=4)-7*(X=9)-9*(X=7)+FNS(X)
 UserFunctionName:FNR -> _
 VariableName:X -> _
 NumericConstant:3
 UnaryOperatorMinus:-(_) -> _
 Variable:X -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 Variable:X -> _
 NumericConstant:3
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:4
 Variable:X -> _
 NumericConstant:6
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:6
 Variable:X -> _
 NumericConstant:4
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:7
 Variable:X -> _
 NumericConstant:9
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:9
 Variable:X -> _
 NumericConstant:7
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 Variable:X -> _
 UserFunction:FNS(_) -> _
 BinaryOperatorPlus:+(_,_) -> _
25 DEF FNS(X)=-X*(X=2 OR X=5 OR X=8)
 UserFunctionName:FNS -> _
 VariableName:X -> _
 Variable:X -> _
 UnaryOperatorMinus:-(_) -> _
 Variable:X -> _
 NumericConstant:2
 BinaryOperatorEqual:=(_,_) -> _
 Variable:X -> _
 NumericConstant:5
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
 Variable:X -> _
 NumericConstant:8
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
30 DEF FNM(Y)=Y-INT(Y/10)*10
 UserFunctionName:FNM -> _
 VariableName:Y -> _
 Variable:Y -> _
 Variable:Y -> _
 NumericConstant:10
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 NumericConstant:10
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
35 P$="X.O"
 Variable:P$ -> $
 TextConstant:"X.O"
 AssignmentOperator:=
40 FOR I=1 TO 19: FOR J=1 TO 9: READ B(I,J): NEXT J: NEXT I
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:19"]
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:9"]
 Variable:I -> _
 Variable:J -> _
 Variable:B(_,_) -> _
 Variable:J -> _
 Variable:I -> _
45 FOR I=1 TO 19: FOR J=1 TO 4: READ M(I,J): NEXT J: NEXT I
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:19"]
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:4"]
 Variable:I -> _
 Variable:J -> _
 Variable:M(_,_) -> _
 Variable:J -> _
 Variable:I -> _
50 PRINT "INSTRUCTIONS (Y-N)";
 TextConstant:"INSTRUCTIONS (Y-N)"
 CarriageControl:;
60 INPUT A$
 Variable:A$ -> $
70 A$=LEFT$(A$,1)
 Variable:A$ -> $
 Variable:A$ -> $
 NumericConstant:1
 FunctionLeft:LEFT$($,_) -> $
 AssignmentOperator:=
80 IF A$="Y" THEN 2000
 Variable:A$ -> $
 TextConstant:"Y"
 BinaryOperatorEqual:=($,$) -> _
90 IF A$<>"N" THEN 50
 Variable:A$ -> $
 TextConstant:"N"
 BinaryOperatorNotEqual:<>($,$) -> _
100 X=0: Y=0
 Variable:X -> _
 NumericConstant:0
 AssignmentOperator:=
 Variable:Y -> _
 NumericConstant:0
 AssignmentOperator:=
111 S(4)=0: S(5)=0: S(6)=0
 NumericConstant:4
 Variable:S(_) -> _
 NumericConstant:0
 AssignmentOperator:=
 NumericConstant:5
 Variable:S(_) -> _
 NumericConstant:0
 AssignmentOperator:=
 NumericConstant:6
 Variable:S(_) -> _
 NumericConstant:0
 AssignmentOperator:=
112 S(1)=-1: S(2)=-1: S(3)=-1
 NumericConstant:1
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 AssignmentOperator:=
 NumericConstant:2
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 AssignmentOperator:=
 NumericConstant:3
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 AssignmentOperator:=
113 S(7)=1: S(8)=1: S(9)=1
 NumericConstant:7
 Variable:S(_) -> _
 NumericConstant:1
 AssignmentOperator:=
 NumericConstant:8
 Variable:S(_) -> _
 NumericConstant:1
 AssignmentOperator:=
 NumericConstant:9
 Variable:S(_) -> _
 NumericConstant:1
 AssignmentOperator:=
115 GOSUB 1000
 LineNumber:1000
120 PRINT "YOUR MOVE";
 TextConstant:"YOUR MOVE"
 CarriageControl:;
121 INPUT M1,M2
 Variable:M1 -> _
 Variable:M2 -> _
122 IF M1=INT(M1)AND M2=INT(M2)AND M1>0 AND M1<10 AND M2>0 AND M2<10 THEN 130
 Variable:M1 -> _
 Variable:M1 -> _
 FunctionInt:INT(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 Variable:M2 -> _
 Variable:M2 -> _
 FunctionInt:INT(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
 Variable:M1 -> _
 NumericConstant:0
 BinaryOperatorGreater:>(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
 Variable:M1 -> _
 NumericConstant:10
 BinaryOperatorLess:<(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
 Variable:M2 -> _
 NumericConstant:0
 BinaryOperatorGreater:>(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
 Variable:M2 -> _
 NumericConstant:10
 BinaryOperatorLess:<(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
123 PRINT "ILLEGAL CO-ORDINATES."
 TextConstant:"ILLEGAL CO-ORDINATES."
 CarriageControl:NL
124 GOTO 120
 LineNumber:120
130 IF S(M1)=1 THEN 150
 Variable:M1 -> _
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
140 PRINT "ILLEGAL MOVE.": GOTO 120
 TextConstant:"ILLEGAL MOVE."
 CarriageControl:NL
 LineNumber:120
150 IF S(M2)=1 THEN 140
 Variable:M2 -> _
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
160 IF M2-M1<>-3 AND S(M2)<>-1 THEN 140
 Variable:M2 -> _
 Variable:M1 -> _
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:3
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorNotEqual:<>(_,_) -> _
 Variable:M2 -> _
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorNotEqual:<>(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
170 IF M2>M1 THEN 140
 Variable:M2 -> _
 Variable:M1 -> _
 BinaryOperatorGreater:>(_,_) -> _
180 IF M2-M1=-3 AND (S(M2)<>0) THEN 140
 Variable:M2 -> _
 Variable:M1 -> _
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:3
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 Variable:M2 -> _
 Variable:S(_) -> _
 NumericConstant:0
 BinaryOperatorNotEqual:<>(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
185 IF M2-M1<-4 THEN 140
 Variable:M2 -> _
 Variable:M1 -> _
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:4
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorLess:<(_,_) -> _
186 IF M1=7 AND M2=3 THEN 140
 Variable:M1 -> _
 NumericConstant:7
 BinaryOperatorEqual:=(_,_) -> _
 Variable:M2 -> _
 NumericConstant:3
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorAnd:AND(_,_) -> _
190 S(M1)=0
 Variable:M1 -> _
 Variable:S(_) -> _
 NumericConstant:0
 AssignmentOperator:=
200 S(M2)=1
 Variable:M2 -> _
 Variable:S(_) -> _
 NumericConstant:1
 AssignmentOperator:=
205 GOSUB 1000
 LineNumber:1000
210 IF S(1)=1 OR S(2)=1 OR S(3)=1 THEN 820
 NumericConstant:1
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
 NumericConstant:2
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
 NumericConstant:3
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
220 FOR I=1 TO 9
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:9"]
221 IF S(I)=-1 THEN 230
 Variable:I -> _
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
222 NEXT I
 Variable:I -> _
223 GOTO 820
 LineNumber:820
230 FOR I=1 TO 9
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:9"]
240 IF S(I)<>-1 THEN 330
 Variable:I -> _
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorNotEqual:<>(_,_) -> _
250 IF S(I+3)=0 THEN 350
 Variable:I -> _
 NumericConstant:3
 BinaryOperatorPlus:+(_,_) -> _
 Variable:S(_) -> _
 NumericConstant:0
 BinaryOperatorEqual:=(_,_) -> _
260 IF FNR(I)=I THEN 320
 Variable:I -> _
 UserFunction:FNR(_) -> _
 Variable:I -> _
 BinaryOperatorEqual:=(_,_) -> _
270 IF I>3 THEN 300
 Variable:I -> _
 NumericConstant:3
 BinaryOperatorGreater:>(_,_) -> _
280 IF S(5)=1 THEN 350
 NumericConstant:5
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
290 GOTO 330
 LineNumber:330
300 IF S(8)=1 THEN 350
 NumericConstant:8
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
310 GOTO 330
 LineNumber:330
320 IF S(I+2)=1 OR S(I+4)=1 THEN 350
 Variable:I -> _
 NumericConstant:2
 BinaryOperatorPlus:+(_,_) -> _
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
 Variable:I -> _
 NumericConstant:4
 BinaryOperatorPlus:+(_,_) -> _
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
330 NEXT I
 Variable:I -> _
340 GOTO 820
 LineNumber:820
350 FOR I=1 TO 19
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:19"]
360 FOR J=1 TO 3
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:3"]
370 FOR K=3 TO 1 STEP -1
 control: Variable:K -> _
 start:   ["NumericConstant:3"]
 end:     ["NumericConstant:1"]
 step:    ["NumericConstant:1", "UnaryOperatorMinus:-(_) -> _"]
380 T((J-1)*3+K)=B(I,(J-1)*3+4-K)
 Variable:J -> _
 NumericConstant:1
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:3
 BinaryOperatorMultiply:*(_,_) -> _
 Variable:K -> _
 BinaryOperatorPlus:+(_,_) -> _
 Variable:T(_) -> _
 Variable:I -> _
 Variable:J -> _
 NumericConstant:1
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:3
 BinaryOperatorMultiply:*(_,_) -> _
 NumericConstant:4
 BinaryOperatorPlus:+(_,_) -> _
 Variable:K -> _
 BinaryOperatorMinus:-(_,_) -> _
 Variable:B(_,_) -> _
 AssignmentOperator:=
390 NEXT K
 Variable:K -> _
400 NEXT J
 Variable:J -> _
410 FOR J=1 TO 9
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:9"]
420 IF S(J)<>B(I,J) THEN 460
 Variable:J -> _
 Variable:S(_) -> _
 Variable:I -> _
 Variable:J -> _
 Variable:B(_,_) -> _
 BinaryOperatorNotEqual:<>(_,_) -> _
430 NEXT J
 Variable:J -> _
440 R=0
 Variable:R -> _
 NumericConstant:0
 AssignmentOperator:=
450 GOTO 540
 LineNumber:540
460 FOR J=1 TO 9
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:9"]
470 IF S(J)<>T(J) THEN 510
 Variable:J -> _
 Variable:S(_) -> _
 Variable:J -> _
 Variable:T(_) -> _
 BinaryOperatorNotEqual:<>(_,_) -> _
480 NEXT J
 Variable:J -> _
490 R=1
 Variable:R -> _
 NumericConstant:1
 AssignmentOperator:=
500 GOTO 540
 LineNumber:540
510 NEXT I
 Variable:I -> _
511 REMEMBER THE TERMINATION OF THIS LOOP IS IMPOSSIBLE
 Remark:EMBER THE TERMINATION OF THIS LOOP IS IMPOSSIBLE
512 PRINT "ILLEGAL BOARD PATTERN."
 TextConstant:"ILLEGAL BOARD PATTERN."
 CarriageControl:NL
530 STOP
 
540 X=I
 Variable:X -> _
 Variable:I -> _
 AssignmentOperator:=
550 FOR I=1 TO 4
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:4"]
560 IF M(X,I)<>0 THEN 600
 Variable:X -> _
 Variable:I -> _
 Variable:M(_,_) -> _
 NumericConstant:0
 BinaryOperatorNotEqual:<>(_,_) -> _
570 NEXT I
 Variable:I -> _
580 PRINT "I RESIGN."
 TextConstant:"I RESIGN."
 CarriageControl:NL
590 GOTO 820
 LineNumber:820
600 Y=INT(RND(1)*4+1)
 Variable:Y -> _
 NumericConstant:1
 FunctionRnd:RND(_) -> _
 NumericConstant:4
 BinaryOperatorMultiply:*(_,_) -> _
 NumericConstant:1
 BinaryOperatorPlus:+(_,_) -> _
 FunctionInt:INT(_) -> _
 AssignmentOperator:=
601 IF M(X,Y)=0 THEN 600
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 NumericConstant:0
 BinaryOperatorEqual:=(_,_) -> _
610 IF R<>0 THEN 630
 Variable:R -> _
 NumericConstant:0
 BinaryOperatorNotEqual:<>(_,_) -> _
620 PRINT "I MOVE FROM ";STR$(INT(M(X,Y)/10));" TO ";STR$(FNM(M(X,Y)))
 TextConstant:"I MOVE FROM "
 CarriageControl:;
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 NumericConstant:10
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 FunctionStr:STR$(_) -> $
 CarriageControl:;
 TextConstant:" TO "
 CarriageControl:;
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 UserFunction:FNM(_) -> _
 FunctionStr:STR$(_) -> $
 CarriageControl:NL
622 S(INT(M(X,Y)/10))=0
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 NumericConstant:10
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 Variable:S(_) -> _
 NumericConstant:0
 AssignmentOperator:=
623 S(FNM(M(X,Y)))=-1
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 UserFunction:FNM(_) -> _
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 AssignmentOperator:=
624 GOTO 640
 LineNumber:640
630 PRINT "I MOVE FROM ";STR$(FNR(INT(M(X,Y)/10)));" TO ";
 TextConstant:"I MOVE FROM "
 CarriageControl:;
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 NumericConstant:10
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 UserFunction:FNR(_) -> _
 FunctionStr:STR$(_) -> $
 CarriageControl:;
 TextConstant:" TO "
 CarriageControl:;
631 PRINT STR$(FNR(FNM(M(X,Y))))
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 UserFunction:FNM(_) -> _
 UserFunction:FNR(_) -> _
 FunctionStr:STR$(_) -> $
 CarriageControl:NL
632 S(FNR(INT(M(X,Y)/10)))=0
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 NumericConstant:10
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 UserFunction:FNR(_) -> _
 Variable:S(_) -> _
 NumericConstant:0
 AssignmentOperator:=
633 S(FNR(FNM(M(X,Y))))=-1
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 UserFunction:FNM(_) -> _
 UserFunction:FNR(_) -> _
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 AssignmentOperator:=
640 GOSUB 1000
 LineNumber:1000
641 IF S(7)=-1 OR S(8)=-1 OR S(9)=-1 THEN 870
 NumericConstant:7
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 NumericConstant:8
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
 NumericConstant:9
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
650 FOR I=1 TO 9
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:9"]
660 IF S(I)=1 THEN 690
 Variable:I -> _
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
670 NEXT I
 Variable:I -> _
680 GOTO 870
 LineNumber:870
690 FOR I=1 TO 9
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:9"]
700 IF S(I)<>1 THEN 790
 Variable:I -> _
 Variable:S(_) -> _
 NumericConstant:1
 BinaryOperatorNotEqual:<>(_,_) -> _
710 IF S(I-3)=0 THEN 120
 Variable:I -> _
 NumericConstant:3
 BinaryOperatorMinus:-(_,_) -> _
 Variable:S(_) -> _
 NumericConstant:0
 BinaryOperatorEqual:=(_,_) -> _
720 IF FNR(I)=I THEN 780
 Variable:I -> _
 UserFunction:FNR(_) -> _
 Variable:I -> _
 BinaryOperatorEqual:=(_,_) -> _
730 IF I<7 THEN 760
 Variable:I -> _
 NumericConstant:7
 BinaryOperatorLess:<(_,_) -> _
740 IF S(5)=-1 THEN 120
 NumericConstant:5
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
750 GOTO 790
 LineNumber:790
760 IF S(2)=-1 THEN 120
 NumericConstant:2
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
770 GOTO 790
 LineNumber:790
780 IF S(I-2)=-1 OR S(I-4)=-1 THEN 120
 Variable:I -> _
 NumericConstant:2
 BinaryOperatorMinus:-(_,_) -> _
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 Variable:I -> _
 NumericConstant:4
 BinaryOperatorMinus:-(_,_) -> _
 Variable:S(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 BinaryOperatorEqual:=(_,_) -> _
 BinaryOperatorOr:OR(_,_) -> _
790 NEXT I
 Variable:I -> _
800 PRINT "YOU CAN'T MOVE, SO ";
 TextConstant:"YOU CAN'T MOVE, SO "
 CarriageControl:;
810 GOTO 870
 LineNumber:870
820 PRINT "YOU WIN."
 TextConstant:"YOU WIN."
 CarriageControl:NL
830 M(X,Y)=0
 Variable:X -> _
 Variable:Y -> _
 Variable:M(_,_) -> _
 NumericConstant:0
 AssignmentOperator:=
840 L=L+1
 Variable:L -> _
 Variable:L -> _
 NumericConstant:1
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:=
850 PRINT "I HAVE WON";W;"AND YOU";L;"OUT OF";L+W;"GAMES."
 TextConstant:"I HAVE WON"
 CarriageControl:;
 Variable:W -> _
 CarriageControl:;
 TextConstant:"AND YOU"
 CarriageControl:;
 Variable:L -> _
 CarriageControl:;
 TextConstant:"OUT OF"
 CarriageControl:;
 Variable:L -> _
 Variable:W -> _
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:;
 TextConstant:"GAMES."
 CarriageControl:NL
851 PRINT
 CarriageControl:NL
860 GOTO 100
 LineNumber:100
870 PRINT "I WIN."
 TextConstant:"I WIN."
 CarriageControl:NL
880 W=W+1
 Variable:W -> _
 Variable:W -> _
 NumericConstant:1
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:=
890 GOTO 850
 LineNumber:850
900 DATA -1,-1,-1,1,0,0,0,1,1,-1,-1,-1,0,1,0,1,0,1
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 NumericConstant:1
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:1
905 DATA -1,0,-1,-1,1,0,0,0,1,0,-1,-1,1,-1,0,0,0,1
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
910 DATA -1,0,-1,1,1,0,0,1,0,-1,-1,0,1,0,1,0,0,1
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
915 DATA 0,-1,-1,0,-1,1,1,0,0,0,-1,-1,-1,1,1,1,0,0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:1
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
920 DATA -1,0,-1,-1,0,1,0,1,0,0,-1,-1,0,1,0,0,0,1
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
925 DATA 0,-1,-1,0,1,0,1,0,0,-1,0,-1,1,0,0,0,0,1
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
930 DATA 0,0,-1,-1,-1,1,0,0,0,-1,0,0,1,1,1,0,0,0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 NumericConstant:1
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
935 DATA 0,-1,0,-1,1,1,0,0,0,-1,0,0,-1,-1,1,0,0,0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
940 DATA 0,0,-1,-1,1,0,0,0,0,0,-1,0,1,-1,0,0,0,0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:1
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
945 DATA -1,0,0,-1,1,0,0,0,0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:0
 NumericConstant:0
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> _
 NumericConstant:1
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
950 DATA 24,25,36,0,14,15,36,0,15,35,36,47,36,58,59,0
 NumericConstant:24
 NumericConstant:25
 NumericConstant:36
 NumericConstant:0
 NumericConstant:14
 NumericConstant:15
 NumericConstant:36
 NumericConstant:0
 NumericConstant:15
 NumericConstant:35
 NumericConstant:36
 NumericConstant:47
 NumericConstant:36
 NumericConstant:58
 NumericConstant:59
 NumericConstant:0
955 DATA 15,35,36,0,24,25,26,0,26,57,58,0
 NumericConstant:15
 NumericConstant:35
 NumericConstant:36
 NumericConstant:0
 NumericConstant:24
 NumericConstant:25
 NumericConstant:26
 NumericConstant:0
 NumericConstant:26
 NumericConstant:57
 NumericConstant:58
 NumericConstant:0
960 DATA 26,35,0,0,47,48,0,0,35,36,0,0,35,36,0,0
 NumericConstant:26
 NumericConstant:35
 NumericConstant:0
 NumericConstant:0
 NumericConstant:47
 NumericConstant:48
 NumericConstant:0
 NumericConstant:0
 NumericConstant:35
 NumericConstant:36
 NumericConstant:0
 NumericConstant:0
 NumericConstant:35
 NumericConstant:36
 NumericConstant:0
 NumericConstant:0
965 DATA 36,0,0,0,47,58,0,0,15,0,0,0
 NumericConstant:36
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
 NumericConstant:47
 NumericConstant:58
 NumericConstant:0
 NumericConstant:0
 NumericConstant:15
 NumericConstant:0
 NumericConstant:0
 NumericConstant:0
970 DATA 26,47,0,0,47,58,0,0,35,36,47,0,28,58,0,0,15,47,0,0
 NumericConstant:26
 NumericConstant:47
 NumericConstant:0
 NumericConstant:0
 NumericConstant:47
 NumericConstant:58
 NumericConstant:0
 NumericConstant:0
 NumericConstant:35
 NumericConstant:36
 NumericConstant:47
 NumericConstant:0
 NumericConstant:28
 NumericConstant:58
 NumericConstant:0
 NumericConstant:0
 NumericConstant:15
 NumericConstant:47
 NumericConstant:0
 NumericConstant:0
1000 PRINT
 CarriageControl:NL
1010 FOR I=1 TO 3
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:3"]
1020 FOR J=1 TO 3
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:3"]
1030 PRINT TAB(10);MID$(P$,S((I-1)*3+J)+2,1);
 NumericConstant:10
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:P$ -> $
 Variable:I -> _
 NumericConstant:1
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:3
 BinaryOperatorMultiply:*(_,_) -> _
 Variable:J -> _
 BinaryOperatorPlus:+(_,_) -> _
 Variable:S(_) -> _
 NumericConstant:2
 BinaryOperatorPlus:+(_,_) -> _
 NumericConstant:1
 FunctionMid:MID$($,_,_) -> $
 CarriageControl:;
1040 NEXT J
 Variable:J -> _
1050 PRINT
 CarriageControl:NL
1060 NEXT I
 Variable:I -> _
1070 PRINT
 CarriageControl:NL
1080 RETURN
 
2000 PRINT: PRINT "THIS PROGRAM PLAYS THE GAME OF HEXAPAWN."
 CarriageControl:NL
 TextConstant:"THIS PROGRAM PLAYS THE GAME OF HEXAPAWN."
 CarriageControl:NL
2010 PRINT "HEXAPAWN IS PLAYED WITH CHESS PAWNS ON A 3 BY 3 BOARD."
 TextConstant:"HEXAPAWN IS PLAYED WITH CHESS PAWNS ON A 3 BY 3 BOARD."
 CarriageControl:NL
2020 PRINT "THE PAWNS ARE MOVED AS IN CHESS - ONE SPACE FORWARD TO"
 TextConstant:"THE PAWNS ARE MOVED AS IN CHESS - ONE SPACE FORWARD TO"
 CarriageControl:NL
2030 PRINT "AN EMPTY SPACE OR ONE SPACE FORWARD AND DIAGONALLY TO"
 TextConstant:"AN EMPTY SPACE OR ONE SPACE FORWARD AND DIAGONALLY TO"
 CarriageControl:NL
2040 PRINT "CAPTURE AN OPPOSING MAN.  ON THE BOARD, YOUR PAWNS"
 TextConstant:"CAPTURE AN OPPOSING MAN.  ON THE BOARD, YOUR PAWNS"
 CarriageControl:NL
2050 PRINT "ARE 'O', THE COMPUTER'S PAWNS ARE 'X', AND EMPTY "
 TextConstant:"ARE 'O', THE COMPUTER'S PAWNS ARE 'X', AND EMPTY "
 CarriageControl:NL
2060 PRINT "SQUARES ARE '.'.  TO ENTER A MOVE, TYPE THE NUMBER OF"
 TextConstant:"SQUARES ARE '.'.  TO ENTER A MOVE, TYPE THE NUMBER OF"
 CarriageControl:NL
2070 PRINT "THE SQUARE YOU ARE MOVING FROM, FOLLOWED BY THE NUMBER"
 TextConstant:"THE SQUARE YOU ARE MOVING FROM, FOLLOWED BY THE NUMBER"
 CarriageControl:NL
2080 PRINT "OF THE SQUARE YOU WILL MOVE TO.  THE NUMBERS MUST BE"
 TextConstant:"OF THE SQUARE YOU WILL MOVE TO.  THE NUMBERS MUST BE"
 CarriageControl:NL
2090 PRINT "SEPERATED BY A COMMA.": PRINT
 TextConstant:"SEPERATED BY A COMMA."
 CarriageControl:NL
 CarriageControl:NL
2100 PRINT "THE COMPUTER STARTS A SERIES OF GAMES KNOWING ONLY WHEN"
 TextConstant:"THE COMPUTER STARTS A SERIES OF GAMES KNOWING ONLY WHEN"
 CarriageControl:NL
2105 PRINT "THE GAME IS WON (A DRAW IS IMPOSSIBLE) AND HOW TO MOVE."
 TextConstant:"THE GAME IS WON (A DRAW IS IMPOSSIBLE) AND HOW TO MOVE."
 CarriageControl:NL
2110 PRINT "IT HAS NO STRATEGY AT FIRST AND JUST MOVES RANDOMLY."
 TextConstant:"IT HAS NO STRATEGY AT FIRST AND JUST MOVES RANDOMLY."
 CarriageControl:NL
2120 PRINT "HOWEVER, IT LEARNS FROM EACH GAME.  THUS, WINNING BECOMES"
 TextConstant:"HOWEVER, IT LEARNS FROM EACH GAME.  THUS, WINNING BECOMES"
 CarriageControl:NL
2130 PRINT "MORE AND MORE DIFFICULT.  ALSO, TO HELP OFFSET YOUR"
 TextConstant:"MORE AND MORE DIFFICULT.  ALSO, TO HELP OFFSET YOUR"
 CarriageControl:NL
2140 PRINT "INITIAL ADVANTAGE, YOU WILL NOT BE TOLD HOW TO WIN THE"
 TextConstant:"INITIAL ADVANTAGE, YOU WILL NOT BE TOLD HOW TO WIN THE"
 CarriageControl:NL
2150 PRINT "GAME BUT MUST LEARN THIS BY PLAYING."
 TextConstant:"GAME BUT MUST LEARN THIS BY PLAYING."
 CarriageControl:NL
2160 PRINT: PRINT "THE NUMBERING OF THE BOARD IS AS FOLLOWS:"
 CarriageControl:NL
 TextConstant:"THE NUMBERING OF THE BOARD IS AS FOLLOWS:"
 CarriageControl:NL
2170 PRINT TAB(10);"123": PRINT TAB(10);"456": PRINT TAB(10);"789"
 NumericConstant:10
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 TextConstant:"123"
 CarriageControl:NL
 NumericConstant:10
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 TextConstant:"456"
 CarriageControl:NL
 NumericConstant:10
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 TextConstant:"789"
 CarriageControl:NL
2180 PRINT: PRINT "FOR EXAMPLE, TO MOVE YOUR RIGHTMOST PAWN FORWARD,"
 CarriageControl:NL
 TextConstant:"FOR EXAMPLE, TO MOVE YOUR RIGHTMOST PAWN FORWARD,"
 CarriageControl:NL
2190 PRINT "YOU WOULD TYPE 9,6 IN RESPONSE TO THE QUESTION"
 TextConstant:"YOU WOULD TYPE 9,6 IN RESPONSE TO THE QUESTION"
 CarriageControl:NL
2200 PRINT "'YOUR MOVE ?'.  SINCE I'M A GOOD SPORT, YOU'LL ALWAYS"
 TextConstant:"'YOUR MOVE ?'.  SINCE I'M A GOOD SPORT, YOU'LL ALWAYS"
 CarriageControl:NL
2210 PRINT "GO FIRST.": PRINT
 TextConstant:"GO FIRST."
 CarriageControl:NL
 CarriageControl:NL
2220 GOTO 100
 LineNumber:100
9999 END
 

