2 PRINT TAB(30);"ONE CHECK"
 NumericValue:30
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 TextValue:"ONE CHECK"
 CarriageControl:NL
4 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 NumericValue:15
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 TextValue:"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 CarriageControl:NL
6 PRINT: PRINT: PRINT
 CarriageControl:NL
 CarriageControl:NL
 CarriageControl:NL
8 DIM A(64)
 NumericValue:64
 Declaration:A() -> .()
10 PRINT "SOLITAIRE CHECKER PUZZLE BY DAVID AHL"
 TextValue:"SOLITAIRE CHECKER PUZZLE BY DAVID AHL"
 CarriageControl:NL
15 PRINT
 CarriageControl:NL
20 PRINT "48 CHECKERS ARE PLACED ON THE 2 OUTSIDE SPACES OF A"
 TextValue:"48 CHECKERS ARE PLACED ON THE 2 OUTSIDE SPACES OF A"
 CarriageControl:NL
25 PRINT "STANDARD 64-SQUARE CHECKERBOARD.  THE OBJECT IS TO"
 TextValue:"STANDARD 64-SQUARE CHECKERBOARD.  THE OBJECT IS TO"
 CarriageControl:NL
30 PRINT "REMOVE AS MANY CHECKERS AS POSSIBLE BY DIAGONAL JUMPS"
 TextValue:"REMOVE AS MANY CHECKERS AS POSSIBLE BY DIAGONAL JUMPS"
 CarriageControl:NL
35 PRINT "(AS IN STANDARD CHECKERS).  USE THE NUMBERED BOARD TO"
 TextValue:"(AS IN STANDARD CHECKERS).  USE THE NUMBERED BOARD TO"
 CarriageControl:NL
40 PRINT "INDICATE THE SQUARE YOU WISH TO JUMP FROM AND TO.  ON"
 TextValue:"INDICATE THE SQUARE YOU WISH TO JUMP FROM AND TO.  ON"
 CarriageControl:NL
45 PRINT "THE BOARD PRINTED OUT ON EACH TURN '1' INDICATES A"
 TextValue:"THE BOARD PRINTED OUT ON EACH TURN '1' INDICATES A"
 CarriageControl:NL
50 PRINT "CHECKER AND '0' AN EMPTY SQUARE.  WHEN YOU HAVE NO"
 TextValue:"CHECKER AND '0' AN EMPTY SQUARE.  WHEN YOU HAVE NO"
 CarriageControl:NL
55 PRINT "POSSIBLE JUMPS REMAINING, INPUT A '0' IN RESPONSE TO"
 TextValue:"POSSIBLE JUMPS REMAINING, INPUT A '0' IN RESPONSE TO"
 CarriageControl:NL
60 PRINT "QUESTION 'JUMP FROM ?'"
 TextValue:"QUESTION 'JUMP FROM ?'"
 CarriageControl:NL
62 PRINT
 CarriageControl:NL
63 PRINT "HERE IS THE NUMERICAL BOARD:"
 TextValue:"HERE IS THE NUMERICAL BOARD:"
 CarriageControl:NL
66 PRINT
 CarriageControl:NL
70 FOR J=1 TO 57 STEP 8
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:57"]
 step:    ["NumericValue:8"]
74 PRINT J;TAB(4);J+1;TAB(8);J+2;TAB(12);J+3;TAB(16);J+4;TAB(20);J+5;
 WARNING: Line exceeds PRETTY width limit 80
 Variable:J -> .
 CarriageControl:;
 NumericValue:4
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 Variable:J -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 CarriageControl:;
 NumericValue:8
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 Variable:J -> .
 NumericValue:2
 BinaryOperatorPlus:+(.,.) -> .
 CarriageControl:;
 NumericValue:12
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 Variable:J -> .
 NumericValue:3
 BinaryOperatorPlus:+(.,.) -> .
 CarriageControl:;
 NumericValue:16
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 Variable:J -> .
 NumericValue:4
 BinaryOperatorPlus:+(.,.) -> .
 CarriageControl:;
 NumericValue:20
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 Variable:J -> .
 NumericValue:5
 BinaryOperatorPlus:+(.,.) -> .
 CarriageControl:;
75 PRINT TAB(24);J+6;TAB(28);J+7
 NumericValue:24
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 Variable:J -> .
 NumericValue:6
 BinaryOperatorPlus:+(.,.) -> .
 CarriageControl:;
 NumericValue:28
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 Variable:J -> .
 NumericValue:7
 BinaryOperatorPlus:+(.,.) -> .
 CarriageControl:NL
76 NEXT J
 Variable:J -> .
77 PRINT
 CarriageControl:NL
78 PRINT "AND HERE IS THE OPENING POSITION OF THE CHECKERS."
 TextValue:"AND HERE IS THE OPENING POSITION OF THE CHECKERS."
 CarriageControl:NL
79 PRINT
 CarriageControl:NL
80 FOR J=1 TO 64
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:64"]
82 A(J)=1
 Variable:J -> .
 Variable:A(.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
84 NEXT J
 Variable:J -> .
86 FOR J=19 TO 43 STEP 8
 control: Variable:J -> .
 start:   ["NumericValue:19"]
 end:     ["NumericValue:43"]
 step:    ["NumericValue:8"]
88 FOR I=J TO J+3
 control: Variable:I -> .
 start:   ["Variable:J -> ."]
 end:     ["Variable:J -> .", "NumericValue:3", "BinaryOperatorPlus:+(.,.) -> ."]
90 A(I)=0
 Variable:I -> .
 Variable:A(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
92 NEXT I
 Variable:I -> .
94 NEXT J
 Variable:J -> .
96 M=0
 Variable:M -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
98 GOTO 340
 LineNumber:340
100 INPUT "JUMP FROM";F
 Variable:F -> .
105 IF F=0 THEN 500
 Variable:F -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:500
110 INPUT "TO";T
 Variable:T -> .
112 PRINT
 CarriageControl:NL
118 REM *** CHECK LEGALITY OF MOVE
 Remark:*** CHECK LEGALITY OF MOVE
120 F1=INT((F-1)/8)
 Variable:F1 -> .
 Variable:F -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
130 F2=F-8*F1
 Variable:F2 -> .
 Variable:F -> .
 NumericValue:8
 Variable:F1 -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
140 T1=INT((T-1)/8)
 Variable:T1 -> .
 Variable:T -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
150 T2=T-8*T1
 Variable:T2 -> .
 Variable:T -> .
 NumericValue:8
 Variable:T1 -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
160 IF F1>7 THEN 230
 Variable:F1 -> .
 NumericValue:7
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:230
170 IF T1>7 THEN 230
 Variable:T1 -> .
 NumericValue:7
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:230
180 IF F2>8 THEN 230
 Variable:F2 -> .
 NumericValue:8
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:230
190 IF T2>8 THEN 230
 Variable:T2 -> .
 NumericValue:8
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:230
200 IF ABS(F1-T1)<>2 THEN 230
 Variable:F1 -> .
 Variable:T1 -> .
 BinaryOperatorMinus:-(.,.) -> .
 FunctionAbs:ABS(.) -> .
 NumericValue:2
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:230
210 IF ABS(F2-T2)<>2 THEN 230
 Variable:F2 -> .
 Variable:T2 -> .
 BinaryOperatorMinus:-(.,.) -> .
 FunctionAbs:ABS(.) -> .
 NumericValue:2
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:230
212 IF A((T+F)/2)=0 THEN 230
 Variable:T -> .
 Variable:F -> .
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:2
 BinaryOperatorDivide:/(.,.) -> .
 Variable:A(.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:230
215 IF A(F)=0 THEN 230
 Variable:F -> .
 Variable:A(.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:230
220 IF A(T)=1 THEN 230
 Variable:T -> .
 Variable:A(.) -> .
 NumericValue:1
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:230
225 GOTO 250
 LineNumber:250
230 PRINT "ILLEGAL MOVE.  TRY AGAIN..."
 TextValue:"ILLEGAL MOVE.  TRY AGAIN..."
 CarriageControl:NL
240 GOTO 100
 LineNumber:100
245 REM *** UPDATE BOARD
 Remark:*** UPDATE BOARD
250 A(T)=1
 Variable:T -> .
 Variable:A(.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
260 A(F)=0
 Variable:F -> .
 Variable:A(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
270 A((T+F)/2)=0
 Variable:T -> .
 Variable:F -> .
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:2
 BinaryOperatorDivide:/(.,.) -> .
 Variable:A(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
290 M=M+1
 Variable:M -> .
 Variable:M -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
310 REM *** PRINT BOARD
 Remark:*** PRINT BOARD
340 FOR J=1 TO 57 STEP 8
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:57"]
 step:    ["NumericValue:8"]
350 FOR I=J TO J+7
 control: Variable:I -> .
 start:   ["Variable:J -> ."]
 end:     ["Variable:J -> .", "NumericValue:7", "BinaryOperatorPlus:+(.,.) -> ."]
360 PRINT A(I);
 Variable:I -> .
 Variable:A(.) -> .
 CarriageControl:;
370 NEXT I
 Variable:I -> .
380 PRINT
 CarriageControl:NL
390 NEXT J
 Variable:J -> .
400 PRINT
 CarriageControl:NL
410 GOTO 100
 LineNumber:100
490 REM *** END GAME SUMMARY
 Remark:*** END GAME SUMMARY
500 S=0
 Variable:S -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
510 FOR I=1 TO 64
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:64"]
520 S=S+A(I)
 Variable:S -> .
 Variable:S -> .
 Variable:I -> .
 Variable:A(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
530 NEXT I
 Variable:I -> .
540 PRINT:PRINT "YOU MADE";M;"JUMPS AND HAD";S;"PIECES"
 CarriageControl:NL
 TextValue:"YOU MADE"
 CarriageControl:;
 Variable:M -> .
 CarriageControl:;
 TextValue:"JUMPS AND HAD"
 CarriageControl:;
 Variable:S -> .
 CarriageControl:;
 TextValue:"PIECES"
 CarriageControl:NL
550 PRINT "REMAINING ON THE BOARD."
 TextValue:"REMAINING ON THE BOARD."
 CarriageControl:NL
560 PRINT
 CarriageControl:NL
562 INPUT "TRY AGAIN";A$
 Variable:A$ -> $
570 IF A$="YES" THEN 70
 Variable:A$ -> $
 TextValue:"YES"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:70
575 IF A$="NO" THEN 600
 Variable:A$ -> $
 TextValue:"NO"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:600
580 PRINT "PLEASE ANSWER 'YES' OR 'NO'."
 TextValue:"PLEASE ANSWER 'YES' OR 'NO'."
 CarriageControl:NL
590 GOTO 562
 LineNumber:562
600 PRINT
 CarriageControl:NL
610 PRINT "O.K.  HOPE YOU HAD FUN!!"
 TextValue:"O.K.  HOPE YOU HAD FUN!!"
 CarriageControl:NL
999 END
 

