2 PRINT TAB(30);"ONE CHECK"
 NumericConstant:30
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 TextConstant:"ONE CHECK"
 CarriageControl:NL
4 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 NumericConstant:15
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 TextConstant:"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 CarriageControl:NL
6 PRINT: PRINT: PRINT
 CarriageControl:NL
 CarriageControl:NL
 CarriageControl:NL
8 DIM A(64)
 NumericConstant:64
 Declaration:A() -> _()
10 PRINT "SOLITAIRE CHECKER PUZZLE BY DAVID AHL"
 TextConstant:"SOLITAIRE CHECKER PUZZLE BY DAVID AHL"
 CarriageControl:NL
15 PRINT
 CarriageControl:NL
20 PRINT "48 CHECKERS ARE PLACED ON THE 2 OUTSIDE SPACES OF A"
 TextConstant:"48 CHECKERS ARE PLACED ON THE 2 OUTSIDE SPACES OF A"
 CarriageControl:NL
25 PRINT "STANDARD 64-SQUARE CHECKERBOARD.  THE OBJECT IS TO"
 TextConstant:"STANDARD 64-SQUARE CHECKERBOARD.  THE OBJECT IS TO"
 CarriageControl:NL
30 PRINT "REMOVE AS MANY CHECKERS AS POSSIBLE BY DIAGONAL JUMPS"
 TextConstant:"REMOVE AS MANY CHECKERS AS POSSIBLE BY DIAGONAL JUMPS"
 CarriageControl:NL
35 PRINT "(AS IN STANDARD CHECKERS).  USE THE NUMBERED BOARD TO"
 TextConstant:"(AS IN STANDARD CHECKERS).  USE THE NUMBERED BOARD TO"
 CarriageControl:NL
40 PRINT "INDICATE THE SQUARE YOU WISH TO JUMP FROM AND TO.  ON"
 TextConstant:"INDICATE THE SQUARE YOU WISH TO JUMP FROM AND TO.  ON"
 CarriageControl:NL
45 PRINT "THE BOARD PRINTED OUT ON EACH TURN '1' INDICATES A"
 TextConstant:"THE BOARD PRINTED OUT ON EACH TURN '1' INDICATES A"
 CarriageControl:NL
50 PRINT "CHECKER AND '0' AN EMPTY SQUARE.  WHEN YOU HAVE NO"
 TextConstant:"CHECKER AND '0' AN EMPTY SQUARE.  WHEN YOU HAVE NO"
 CarriageControl:NL
55 PRINT "POSSIBLE JUMPS REMAINING, INPUT A '0' IN RESPONSE TO"
 TextConstant:"POSSIBLE JUMPS REMAINING, INPUT A '0' IN RESPONSE TO"
 CarriageControl:NL
60 PRINT "QUESTION 'JUMP FROM ?'"
 TextConstant:"QUESTION 'JUMP FROM ?'"
 CarriageControl:NL
62 PRINT
 CarriageControl:NL
63 PRINT "HERE IS THE NUMERICAL BOARD:"
 TextConstant:"HERE IS THE NUMERICAL BOARD:"
 CarriageControl:NL
66 PRINT
 CarriageControl:NL
70 FOR J=1 TO 57 STEP 8
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:57"]
 step:    ["NumericConstant:8"]
74 PRINT J;TAB(4);J+1;TAB(8);J+2;TAB(12);J+3;TAB(16);J+4;TAB(20);J+5;
 Variable:J -> _
 CarriageControl:;
 NumericConstant:4
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:J -> _
 NumericConstant:1
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:;
 NumericConstant:8
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:J -> _
 NumericConstant:2
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:;
 NumericConstant:12
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:J -> _
 NumericConstant:3
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:;
 NumericConstant:16
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:J -> _
 NumericConstant:4
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:;
 NumericConstant:20
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:J -> _
 NumericConstant:5
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:;
75 PRINT TAB(24);J+6;TAB(28);J+7
 NumericConstant:24
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:J -> _
 NumericConstant:6
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:;
 NumericConstant:28
 FunctionTab:TAB(_) -> $
 CarriageControl:;
 Variable:J -> _
 NumericConstant:7
 BinaryOperatorPlus:+(_,_) -> _
 CarriageControl:NL
76 NEXT J
 Variable:J -> _
77 PRINT
 CarriageControl:NL
78 PRINT "AND HERE IS THE OPENING POSITION OF THE CHECKERS."
 TextConstant:"AND HERE IS THE OPENING POSITION OF THE CHECKERS."
 CarriageControl:NL
79 PRINT
 CarriageControl:NL
80 FOR J=1 TO 64
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:64"]
82 A(J)=1
 Variable:J -> _
 Variable:A(_) -> _
 NumericConstant:1
 AssignmentOperator:= =_ -> _
84 NEXT J
 Variable:J -> _
86 FOR J=19 TO 43 STEP 8
 control: Variable:J -> _
 start:   ["NumericConstant:19"]
 end:     ["NumericConstant:43"]
 step:    ["NumericConstant:8"]
88 FOR I=J TO J+3
 control: Variable:I -> _
 start:   ["Variable:J -> _"]
 end:     ["Variable:J -> _", "NumericConstant:3", "BinaryOperatorPlus:+(_,_) -> _"]
90 A(I)=0
 Variable:I -> _
 Variable:A(_) -> _
 NumericConstant:0
 AssignmentOperator:= =_ -> _
92 NEXT I
 Variable:I -> _
94 NEXT J
 Variable:J -> _
96 M=0
 Variable:M -> _
 NumericConstant:0
 AssignmentOperator:= =_ -> _
98 GOTO 340
 LineNumber:340
100 INPUT "JUMP FROM";F
 Variable:F -> _
105 IF F=0 THEN 500
 Variable:F -> _
 NumericConstant:0
 BinaryOperatorEqual:=(_,_) -> _
110 INPUT "TO";T
 Variable:T -> _
112 PRINT
 CarriageControl:NL
118 REM *** CHECK LEGALITY OF MOVE
 Remark:*** CHECK LEGALITY OF MOVE
120 F1=INT((F-1)/8)
 Variable:F1 -> _
 Variable:F -> _
 NumericConstant:1
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:8
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 AssignmentOperator:= _ -> _
130 F2=F-8*F1
 Variable:F2 -> _
 Variable:F -> _
 NumericConstant:8
 Variable:F1 -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 AssignmentOperator:= _ -> _
140 T1=INT((T-1)/8)
 Variable:T1 -> _
 Variable:T -> _
 NumericConstant:1
 BinaryOperatorMinus:-(_,_) -> _
 NumericConstant:8
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 AssignmentOperator:= _ -> _
150 T2=T-8*T1
 Variable:T2 -> _
 Variable:T -> _
 NumericConstant:8
 Variable:T1 -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 AssignmentOperator:= _ -> _
160 IF F1>7 THEN 230
 Variable:F1 -> _
 NumericConstant:7
 BinaryOperatorGreater:>(_,_) -> _
170 IF T1>7 THEN 230
 Variable:T1 -> _
 NumericConstant:7
 BinaryOperatorGreater:>(_,_) -> _
180 IF F2>8 THEN 230
 Variable:F2 -> _
 NumericConstant:8
 BinaryOperatorGreater:>(_,_) -> _
190 IF T2>8 THEN 230
 Variable:T2 -> _
 NumericConstant:8
 BinaryOperatorGreater:>(_,_) -> _
200 IF ABS(F1-T1)<>2 THEN 230
 Variable:F1 -> _
 Variable:T1 -> _
 BinaryOperatorMinus:-(_,_) -> _
 FunctionAbs:ABS(_) -> _
 NumericConstant:2
 BinaryOperatorNotEqual:<>(_,_) -> _
210 IF ABS(F2-T2)<>2 THEN 230
 Variable:F2 -> _
 Variable:T2 -> _
 BinaryOperatorMinus:-(_,_) -> _
 FunctionAbs:ABS(_) -> _
 NumericConstant:2
 BinaryOperatorNotEqual:<>(_,_) -> _
212 IF A((T+F)/2)=0 THEN 230
 Variable:T -> _
 Variable:F -> _
 BinaryOperatorPlus:+(_,_) -> _
 NumericConstant:2
 BinaryOperatorDivide:/(_,_) -> _
 Variable:A(_) -> _
 NumericConstant:0
 BinaryOperatorEqual:=(_,_) -> _
215 IF A(F)=0 THEN 230
 Variable:F -> _
 Variable:A(_) -> _
 NumericConstant:0
 BinaryOperatorEqual:=(_,_) -> _
220 IF A(T)=1 THEN 230
 Variable:T -> _
 Variable:A(_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> _
225 GOTO 250
 LineNumber:250
230 PRINT "ILLEGAL MOVE.  TRY AGAIN..."
 TextConstant:"ILLEGAL MOVE.  TRY AGAIN..."
 CarriageControl:NL
240 GOTO 100
 LineNumber:100
245 REM *** UPDATE BOARD
 Remark:*** UPDATE BOARD
250 A(T)=1
 Variable:T -> _
 Variable:A(_) -> _
 NumericConstant:1
 AssignmentOperator:= =_ -> _
260 A(F)=0
 Variable:F -> _
 Variable:A(_) -> _
 NumericConstant:0
 AssignmentOperator:= =_ -> _
270 A((T+F)/2)=0
 Variable:T -> _
 Variable:F -> _
 BinaryOperatorPlus:+(_,_) -> _
 NumericConstant:2
 BinaryOperatorDivide:/(_,_) -> _
 Variable:A(_) -> _
 NumericConstant:0
 AssignmentOperator:= =_ -> _
290 M=M+1
 Variable:M -> _
 Variable:M -> _
 NumericConstant:1
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:= _ -> _
310 REM *** PRINT BOARD
 Remark:*** PRINT BOARD
340 FOR J=1 TO 57 STEP 8
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:57"]
 step:    ["NumericConstant:8"]
350 FOR I=J TO J+7
 control: Variable:I -> _
 start:   ["Variable:J -> _"]
 end:     ["Variable:J -> _", "NumericConstant:7", "BinaryOperatorPlus:+(_,_) -> _"]
360 PRINT A(I);
 Variable:I -> _
 Variable:A(_) -> _
 CarriageControl:;
370 NEXT I
 Variable:I -> _
380 PRINT
 CarriageControl:NL
390 NEXT J
 Variable:J -> _
400 PRINT
 CarriageControl:NL
410 GOTO 100
 LineNumber:100
490 REM *** END GAME SUMMARY
 Remark:*** END GAME SUMMARY
500 S=0
 Variable:S -> _
 NumericConstant:0
 AssignmentOperator:= =_ -> _
510 FOR I=1 TO 64
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["NumericConstant:64"]
520 S=S+A(I)
 Variable:S -> _
 Variable:S -> _
 Variable:I -> _
 Variable:A(_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:= _ -> _
530 NEXT I
 Variable:I -> _
540 PRINT:PRINT "YOU MADE";M;"JUMPS AND HAD";S;"PIECES"
 CarriageControl:NL
 TextConstant:"YOU MADE"
 CarriageControl:;
 Variable:M -> _
 CarriageControl:;
 TextConstant:"JUMPS AND HAD"
 CarriageControl:;
 Variable:S -> _
 CarriageControl:;
 TextConstant:"PIECES"
 CarriageControl:NL
550 PRINT "REMAINING ON THE BOARD."
 TextConstant:"REMAINING ON THE BOARD."
 CarriageControl:NL
560 PRINT
 CarriageControl:NL
562 INPUT "TRY AGAIN";A$
 Variable:A$ -> $
570 IF A$="YES" THEN 70
 Variable:A$ -> $
 TextConstant:"YES"
 BinaryOperatorEqual:=($,$) -> _
575 IF A$="NO" THEN 600
 Variable:A$ -> $
 TextConstant:"NO"
 BinaryOperatorEqual:=($,$) -> _
580 PRINT "PLEASE ANSWER 'YES' OR 'NO'."
 TextConstant:"PLEASE ANSWER 'YES' OR 'NO'."
 CarriageControl:NL
590 GOTO 562
 LineNumber:562
600 PRINT
 CarriageControl:NL
610 PRINT "O.K.  HOPE YOU HAD FUN!!"
 TextConstant:"O.K.  HOPE YOU HAD FUN!!"
 CarriageControl:NL
999 END
 

