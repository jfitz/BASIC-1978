1 PRINT TAB(33);"MUGWUMP"
 NumericValue:33
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 TextValue:"MUGWUMP"
 CarriageControl:NL
2 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 NumericValue:15
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 TextValue:"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 CarriageControl:NL
3 PRINT:PRINT:PRINT
 CarriageControl:NL
 CarriageControl:NL
 CarriageControl:NL
4 REM     COURTESY PEOPLE'S COMPUTER COMPANY
 Remark:    COURTESY PEOPLE'S COMPUTER COMPANY
10 DIM P(4,2)
 NumericValue:4
 NumericValue:2
 Declaration:P(,) -> .(,)
20 PRINT "THE OBJECT OF THIS GAME IS TO FIND FOUR MUGWUMPS"
 TextValue:"THE OBJECT OF THIS GAME IS TO FIND FOUR MUGWUMPS"
 CarriageControl:NL
30 PRINT "HIDDEN ON A 10 BY 10 GRID.  HOMEBASE IS POSITION 0,0."
 TextValue:"HIDDEN ON A 10 BY 10 GRID.  HOMEBASE IS POSITION 0,0."
 CarriageControl:NL
40 PRINT "ANY GUESS YOU MAKE MUST BE TWO NUMBERS WITH EACH"
 TextValue:"ANY GUESS YOU MAKE MUST BE TWO NUMBERS WITH EACH"
 CarriageControl:NL
50 PRINT "NUMBER BETWEEN 0 AND 9, INCLUSIVE.  FIRST NUMBER"
 TextValue:"NUMBER BETWEEN 0 AND 9, INCLUSIVE.  FIRST NUMBER"
 CarriageControl:NL
60 PRINT "IS DISTANCE TO RIGHT OF HOMEBASE AND SECOND NUMBER"
 TextValue:"IS DISTANCE TO RIGHT OF HOMEBASE AND SECOND NUMBER"
 CarriageControl:NL
70 PRINT "IS DISTANCE ABOVE HOMEBASE."
 TextValue:"IS DISTANCE ABOVE HOMEBASE."
 CarriageControl:NL
80 PRINT
 CarriageControl:NL
90 PRINT "YOU GET 10 TRIES.  AFTER EACH TRY, I WILL TELL"
 TextValue:"YOU GET 10 TRIES.  AFTER EACH TRY, I WILL TELL"
 CarriageControl:NL
100 PRINT "YOU HOW FAR YOU ARE FROM EACH MUGWUMP."
 TextValue:"YOU HOW FAR YOU ARE FROM EACH MUGWUMP."
 CarriageControl:NL
110 PRINT
 CarriageControl:NL
240 GOSUB 1000
 LineNumber:1000
250 T=0
 Variable:T -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
260 T=T+1
 Variable:T -> .
 Variable:T -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
270 PRINT
 CarriageControl:NL
275 PRINT
 CarriageControl:NL
290 PRINT "TURN NO.";T;"-- WHAT IS YOUR GUESS";
 TextValue:"TURN NO."
 CarriageControl:;
 Variable:T -> .
 CarriageControl:;
 TextValue:"-- WHAT IS YOUR GUESS"
 CarriageControl:;
300 INPUT M,N
 Variable:M -> .
 Variable:N -> .
310 FOR I=1 TO 4
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
320 IF P(I,1)=-1 THEN 400
 Variable:I -> .
 NumericValue:1
 Variable:P(.,.) -> .
 NumericValue:1
 UnaryOperatorMinus:-(.) -> =.
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:400
330 IF P(I,1)<>M THEN 380
 Variable:I -> .
 NumericValue:1
 Variable:P(.,.) -> .
 Variable:M -> .
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:380
340 IF P(I,2)<>N THEN 380
 Variable:I -> .
 NumericValue:2
 Variable:P(.,.) -> .
 Variable:N -> .
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:380
350 P(I,1)=-1
 Variable:I -> .
 NumericValue:1
 Variable:P(.,.) -> .
 NumericValue:1
 UnaryOperatorMinus:-(.) -> =.
 AssignmentOperator:= =. -> .
360 PRINT "YOU HAVE FOUND MUGWUMP";I
 TextValue:"YOU HAVE FOUND MUGWUMP"
 CarriageControl:;
 Variable:I -> .
 CarriageControl:NL
370 GOTO 400
 LineNumber:400
380 D=SQR((P(I,1)-M)^2+(P(I,2)-N)^2)
 Variable:D -> .
 Variable:I -> .
 NumericValue:1
 Variable:P(.,.) -> .
 Variable:M -> .
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:2
 BinaryOperatorPower:^(.,.) -> .
 Variable:I -> .
 NumericValue:2
 Variable:P(.,.) -> .
 Variable:N -> .
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:2
 BinaryOperatorPower:^(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 FunctionSqr:SQR(.) -> .
 AssignmentOperator:= . -> .
390 PRINT "YOU ARE";(INT(D*10))/10;"UNITS FROM MUGWUMP";I
 TextValue:"YOU ARE"
 CarriageControl:;
 Variable:D -> .
 NumericValue:10
 BinaryOperatorMultiply:*(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:10
 BinaryOperatorDivide:/(.,.) -> .
 CarriageControl:;
 TextValue:"UNITS FROM MUGWUMP"
 CarriageControl:;
 Variable:I -> .
 CarriageControl:NL
400 NEXT I
 Variable:I -> .
410 FOR J=1 TO 4
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
420 IF P(J,1)<>-1 THEN 470
 WARNING: Transfer in/out of FOR/NEXT 470
 Variable:J -> .
 NumericValue:1
 Variable:P(.,.) -> .
 NumericValue:1
 UnaryOperatorMinus:-(.) -> =.
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:470
430 NEXT J
 Variable:J -> .
440 PRINT
 CarriageControl:NL
450 PRINT "YOU GOT THEM ALL IN";T;"TURNS!"
 TextValue:"YOU GOT THEM ALL IN"
 CarriageControl:;
 Variable:T -> .
 CarriageControl:;
 TextValue:"TURNS!"
 CarriageControl:NL
460 GOTO 580
 LineNumber:580
470 IF T<10 THEN 260
 Variable:T -> .
 NumericValue:10
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:260
480 PRINT
 CarriageControl:NL
490 PRINT "SORRY, THAT'S 10 TRIES.  HERE IS WHERE THEY'RE HIDING:"
 TextValue:"SORRY, THAT'S 10 TRIES.  HERE IS WHERE THEY'RE HIDING:"
 CarriageControl:NL
540 FOR I=1 TO 4
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
550 IF P(I,1)=-1 THEN 570
 Variable:I -> .
 NumericValue:1
 Variable:P(.,.) -> .
 NumericValue:1
 UnaryOperatorMinus:-(.) -> =.
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:570
560 PRINT "MUGWUMP";I;"IS AT (";P(I,1);",";P(I,2);")"
 TextValue:"MUGWUMP"
 CarriageControl:;
 Variable:I -> .
 CarriageControl:;
 TextValue:"IS AT ("
 CarriageControl:;
 Variable:I -> .
 NumericValue:1
 Variable:P(.,.) -> .
 CarriageControl:;
 TextValue:","
 CarriageControl:;
 Variable:I -> .
 NumericValue:2
 Variable:P(.,.) -> .
 CarriageControl:;
 TextValue:")"
 CarriageControl:NL
570 NEXT I
 Variable:I -> .
580 PRINT
 CarriageControl:NL
600 PRINT "THAT WAS FUN! LET'S PLAY AGAIN......."
 TextValue:"THAT WAS FUN! LET'S PLAY AGAIN......."
 CarriageControl:NL
610 PRINT "FOUR MORE MUGWUMPS ARE NOW IN HIDING."
 TextValue:"FOUR MORE MUGWUMPS ARE NOW IN HIDING."
 CarriageControl:NL
630 GOTO 240
 LineNumber:240
1000 FOR J=1 TO 2
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:2"]
1010 FOR I=1 TO 4
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
1020 P(I,J)=INT(10*RND(1))
 Variable:I -> .
 Variable:J -> .
 Variable:P(.,.) -> .
 NumericValue:10
 NumericValue:1
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
1030 NEXT I
 Variable:I -> .
1040 NEXT J
 Variable:J -> .
1050 RETURN
 
1099 END
 

