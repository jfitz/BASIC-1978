10 PRINT TAB(30);"STOCK MARKET"
 NumericValue:30
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 TextValue:"STOCK MARKET"
 CarriageControl:NL
20 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 NumericValue:15
 FunctionTab:TAB(.) -> $
 CarriageControl:;
 TextValue:"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
 CarriageControl:NL
30 PRINT: PRINT: PRINT
 CarriageControl:NL
 CarriageControl:NL
 CarriageControl:NL
100 REM STOCK MARKET SIMULATION     -STOCK-
 Remark:STOCK MARKET SIMULATION     -STOCK-
101 REM REVISED 8/18/70 (D. PESSEL, L. BRAUN, C. LOSIK)  
 Remark:REVISED 8/18/70 (D. PESSEL, L. BRAUN, C. LOSIK)  
102 REM IMP VRBLS: A-MRKT TRND SLP; B5-BRKRGE FEE; C-TTL CSH ASSTS;    
 Remark:IMP VRBLS: A-MRKT TRND SLP; B5-BRKRGE FEE; C-TTL CSH ASSTS;    
103 REM C5-TTL CSH ASSTS (TEMP); C(I)-CHNG IN STK VAL; D-TTL ASSTS;
 Remark:C5-TTL CSH ASSTS (TEMP); C(I)-CHNG IN STK VAL; D-TTL ASSTS;
104 REM E1,E2-LRG CHNG MISC; I-STCK #; I1,I2-STCKS W LRG CHNG; 
 Remark:E1,E2-LRG CHNG MISC; I-STCK #; I1,I2-STCKS W LRG CHNG; 
105 REM N1,N2-LRG CHNG DAY CNTS; P5-TTL DAYS PRCHSS; P(I)-PRTFL CNTNTS;
 Remark:N1,N2-LRG CHNG DAY CNTS; P5-TTL DAYS PRCHSS; P(I)-PRTFL CNTNTS;
106 REM Q9-NEW CYCL?; S4-SGN OF A; S5-TTL DYS SLS; S(I)-VALUE/SHR; 
 Remark:Q9-NEW CYCL?; S4-SGN OF A; S5-TTL DYS SLS; S(I)-VALUE/SHR; 
107 REM T-TTL STCK ASSTS; T5-TTL VAL OF TRNSCTNS;
 Remark:T-TTL STCK ASSTS; T5-TTL VAL OF TRNSCTNS;
108 REM W3-LRG CHNG; X1-SMLL CHNG(<$1); Z4,Z5,Z6-NYSE AVE.; Z(I)-TRNSCT
 Remark:W3-LRG CHNG; X1-SMLL CHNG(<$1); Z4,Z5,Z6-NYSE AVE.; Z(I)-TRNSCT
110 DIM S(5),P(5),Z(5),C(5) 
 NumericValue:5
 Declaration:S() -> .()
 NumericValue:5
 Declaration:P() -> .()
 NumericValue:5
 Declaration:Z() -> .()
 NumericValue:5
 Declaration:C() -> .()
112 REM SLOPE OF MARKET TREND:A  (SAME FOR ALL STOCKS) 
 Remark:SLOPE OF MARKET TREND:A  (SAME FOR ALL STOCKS) 
113 LET X=1
 Variable:X -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
114 LET A=INT((RND(X)/10)*100+.5)/100 
 Variable:A -> .
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 NumericValue:10
 BinaryOperatorDivide:/(.,.) -> .
 NumericValue:100
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
115 LET T5=0
 Variable:T5 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
116 LET X9=0
 Variable:X9 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
117 LET N1=0
 Variable:N1 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
118 LET N2=0
 Variable:N2 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
119 LET E1=0
 Variable:E1 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
120 LET E2=0
 Variable:E2 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
121 REM INTRODUCTION 
 Remark:INTRODUCTION 
122 PRINT "DO YOU WANT THE INSTRUCTIONS (YES-TYPE 1, NO-TYPE 0)"; 
 TextValue:"DO YOU WANT THE INSTRUCTIONS (YES-TYPE 1, NO-TYPE 0)"
 CarriageControl:;
123 INPUT Z9
 Variable:Z9 -> .
124 PRINT 
 CarriageControl:NL
125 PRINT 
 CarriageControl:NL
126 IF Z9<1 THEN 200
 Variable:Z9 -> .
 NumericValue:1
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:200
130 PRINT "THIS PROGRAM PLAYS THE STOCK MARKET.  YOU WILL BE GIVEN" 
 TextValue:"THIS PROGRAM PLAYS THE STOCK MARKET.  YOU WILL BE GIVEN"
 CarriageControl:NL
132 PRINT "$10,000 AND MAY BUY OR SELL STOCKS.  THE STOCK PRICES WILL"
 TextValue:"$10,000 AND MAY BUY OR SELL STOCKS.  THE STOCK PRICES WILL"
 CarriageControl:NL
134 PRINT "BE GENERATED RANDOMLY AND THEREFORE THIS MODEL DOES NOT" 
 TextValue:"BE GENERATED RANDOMLY AND THEREFORE THIS MODEL DOES NOT"
 CarriageControl:NL
135 PRINT "REPRESENT EXACTLY WHAT HAPPENS ON THE EXCHANGE.  A TABLE"
 TextValue:"REPRESENT EXACTLY WHAT HAPPENS ON THE EXCHANGE.  A TABLE"
 CarriageControl:NL
136 PRINT "OF AVAILABLE STOCKS, THEIR PRICES, AND THE NUMBER OF SHARES"
 TextValue:"OF AVAILABLE STOCKS, THEIR PRICES, AND THE NUMBER OF SHARES"
 CarriageControl:NL
137 PRINT "IN YOUR PORTFOLIO WILL BE PRINTED.  FOLLOWING THIS, THE" 
 TextValue:"IN YOUR PORTFOLIO WILL BE PRINTED.  FOLLOWING THIS, THE"
 CarriageControl:NL
138 PRINT "INITIALS OF EACH STOCK WILL BE PRINTED WITH A QUESTION"
 TextValue:"INITIALS OF EACH STOCK WILL BE PRINTED WITH A QUESTION"
 CarriageControl:NL
139 PRINT "MARK.  HERE YOU INDICATE A TRANSACTION.  TO BUY A STOCK" 
 TextValue:"MARK.  HERE YOU INDICATE A TRANSACTION.  TO BUY A STOCK"
 CarriageControl:NL
140 PRINT "TYPE +NNN, TO SELL A STOCK TYPE -NNN, WHERE NNN IS THE"  
 TextValue:"TYPE +NNN, TO SELL A STOCK TYPE -NNN, WHERE NNN IS THE"
 CarriageControl:NL
141 PRINT "NUMBER OF SHARES.  A BROKERAGE FEE OF 1% WILL BE CHARGED"
 TextValue:"NUMBER OF SHARES.  A BROKERAGE FEE OF 1% WILL BE CHARGED"
 CarriageControl:NL
142 PRINT "ON ALL TRANSACTIONS.  NOTE THAT IF A STOCK'S VALUE DROPS"
 TextValue:"ON ALL TRANSACTIONS.  NOTE THAT IF A STOCK'S VALUE DROPS"
 CarriageControl:NL
143 PRINT "TO ZERO IT MAY REBOUND TO A POSITIVE VALUE AGAIN.  YOU"
 TextValue:"TO ZERO IT MAY REBOUND TO A POSITIVE VALUE AGAIN.  YOU"
 CarriageControl:NL
144 PRINT "HAVE $10,000 TO INVEST.  USE INTEGERS FOR ALL YOUR INPUTS."
 TextValue:"HAVE $10,000 TO INVEST.  USE INTEGERS FOR ALL YOUR INPUTS."
 CarriageControl:NL
145 PRINT "(NOTE:  TO GET A 'FEEL' FOR THE MARKET RUN FOR AT LEAST" 
 TextValue:"(NOTE:  TO GET A 'FEEL' FOR THE MARKET RUN FOR AT LEAST"
 CarriageControl:NL
146 PRINT "10 DAYS)"
 TextValue:"10 DAYS)"
 CarriageControl:NL
147 PRINT "-----GOOD LUCK!-----"
 TextValue:"-----GOOD LUCK!-----"
 CarriageControl:NL
200 REM GENERATION OF STOCK TABLE; INPUT REQUESTS  
 Remark:GENERATION OF STOCK TABLE; INPUT REQUESTS  
210 REM INITIAL STOCK VALUES 
 Remark:INITIAL STOCK VALUES 
220 LET S(1)=100
 NumericValue:1
 Variable:S(.) -> .
 NumericValue:100
 AssignmentOperator:= =. -> .
230 LET S(2)=85 
 NumericValue:2
 Variable:S(.) -> .
 NumericValue:85
 AssignmentOperator:= =. -> .
240 LET S(3)=150
 NumericValue:3
 Variable:S(.) -> .
 NumericValue:150
 AssignmentOperator:= =. -> .
250 LET S(4)=140
 NumericValue:4
 Variable:S(.) -> .
 NumericValue:140
 AssignmentOperator:= =. -> .
260 LET S(5)=110
 NumericValue:5
 Variable:S(.) -> .
 NumericValue:110
 AssignmentOperator:= =. -> .
265 REM INITIAL T8 - # DAYS FOR FIRST TREND SLOPE (A)
 Remark:INITIAL T8 - # DAYS FOR FIRST TREND SLOPE (A)
266 LET T8=INT(4.99*RND(X)+1) 
 Variable:T8 -> .
 NumericValue:4.99
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
267 REM RANDOMIZE SIGN OF FIRST TREND SLOPE (A)
 Remark:RANDOMIZE SIGN OF FIRST TREND SLOPE (A)
268 IF RND(X)>.5 THEN 270 
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 NumericValue:.5
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:270
269 LET A=-A
 Variable:A -> .
 Variable:A -> .
 UnaryOperatorMinus:-(.) -> .
 AssignmentOperator:= . -> .
270 REM RANDOMIZE INITIAL VALUES 
 Remark:RANDOMIZE INITIAL VALUES 
280 GOSUB 830 
 LineNumber:830
285 REM INITIAL PORTFOLIO CONTENTS 
 Remark:INITIAL PORTFOLIO CONTENTS 
290 FOR I=1 TO 5
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:5"]
300 LET P(I)=0
 Variable:I -> .
 Variable:P(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
305 LET Z(I)=0
 Variable:I -> .
 Variable:Z(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
310 NEXT I
 Variable:I -> .
320 PRINT 
 CarriageControl:NL
330 PRINT 
 CarriageControl:NL
333 REM INITIALIZE CASH ASSETS:C 
 Remark:INITIALIZE CASH ASSETS:C 
335 LET C=10000 
 Variable:C -> .
 NumericValue:10000
 AssignmentOperator:= =. -> .
338 REM PRINT INITIAL PORTFOLIO
 Remark:PRINT INITIAL PORTFOLIO
340 PRINT "STOCK"," ","INITIALS","PRICE/SHARE"
 TextValue:"STOCK"
 CarriageControl:,
 TextValue:" "
 CarriageControl:,
 TextValue:"INITIALS"
 CarriageControl:,
 TextValue:"PRICE/SHARE"
 CarriageControl:NL
350 PRINT "INT. BALLISTIC MISSILES","  IBM",S(1)
 TextValue:"INT. BALLISTIC MISSILES"
 CarriageControl:,
 TextValue:"  IBM"
 CarriageControl:,
 NumericValue:1
 Variable:S(.) -> .
 CarriageControl:NL
352 PRINT "RED CROSS OF AMERICA","  RCA",S(2) 
 TextValue:"RED CROSS OF AMERICA"
 CarriageControl:,
 TextValue:"  RCA"
 CarriageControl:,
 NumericValue:2
 Variable:S(.) -> .
 CarriageControl:NL
354 PRINT "LICHTENSTEIN, BUMRAP & JOKE","  LBJ",S(3)
 TextValue:"LICHTENSTEIN, BUMRAP & JOKE"
 CarriageControl:,
 TextValue:"  LBJ"
 CarriageControl:,
 NumericValue:3
 Variable:S(.) -> .
 CarriageControl:NL
356 PRINT "AMERICAN BANKRUPT CO.","  ABC",S(4)
 TextValue:"AMERICAN BANKRUPT CO."
 CarriageControl:,
 TextValue:"  ABC"
 CarriageControl:,
 NumericValue:4
 Variable:S(.) -> .
 CarriageControl:NL
358 PRINT "CENSURED BOOKS STORE","  CBS",S(5) 
 TextValue:"CENSURED BOOKS STORE"
 CarriageControl:,
 TextValue:"  CBS"
 CarriageControl:,
 NumericValue:5
 Variable:S(.) -> .
 CarriageControl:NL
360 PRINT 
 CarriageControl:NL
361 REM NYSE AVERAGE:Z5; TEMP. VALUE:Z4; NET CHANGE:Z6 
 Remark:NYSE AVERAGE:Z5; TEMP. VALUE:Z4; NET CHANGE:Z6 
363 LET Z4=Z5 
 Variable:Z4 -> .
 Variable:Z5 -> .
 AssignmentOperator:= . -> .
364 LET Z5=0
 Variable:Z5 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
365 LET T=0 
 Variable:T -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
370 FOR I=1 TO 5
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:5"]
375 LET Z5=Z5+S(I)
 Variable:Z5 -> .
 Variable:Z5 -> .
 Variable:I -> .
 Variable:S(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
380 LET T=T+S(I)*P(I) 
 Variable:T -> .
 Variable:T -> .
 Variable:I -> .
 Variable:S(.) -> .
 Variable:I -> .
 Variable:P(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
390 NEXT I
 Variable:I -> .
391 LET Z5=INT(100*(Z5/5)+.5)/100 
 Variable:Z5 -> .
 NumericValue:100
 Variable:Z5 -> .
 NumericValue:5
 BinaryOperatorDivide:/(.,.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
392 LET Z6=INT((Z5-Z4)*100+.5)/100
 Variable:Z6 -> .
 Variable:Z5 -> .
 Variable:Z4 -> .
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:100
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
393 REM TOTAL ASSETS:D 
 Remark:TOTAL ASSETS:D 
394 LET D=T+C 
 Variable:D -> .
 Variable:T -> .
 Variable:C -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
395 IF X9>0 THEN 398
 Variable:X9 -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:398
396 PRINT "NEW YORK STOCK EXCHANGE AVERAGE: ";Z5 
 TextValue:"NEW YORK STOCK EXCHANGE AVERAGE: "
 CarriageControl:;
 Variable:Z5 -> .
 CarriageControl:NL
397 GOTO 399 
 LineNumber:399
398 PRINT "NEW YORK STOCK EXCHANGE AVERAGE: ";Z5;" NET CHANGE";Z6
 TextValue:"NEW YORK STOCK EXCHANGE AVERAGE: "
 CarriageControl:;
 Variable:Z5 -> .
 CarriageControl:;
 TextValue:" NET CHANGE"
 CarriageControl:;
 Variable:Z6 -> .
 CarriageControl:NL
399 PRINT 
 CarriageControl:NL
400 LET T=INT(100*T+.5)/100 
 Variable:T -> .
 NumericValue:100
 Variable:T -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
401 PRINT "TOTAL STOCK ASSETS ARE   $";T
 TextValue:"TOTAL STOCK ASSETS ARE   $"
 CarriageControl:;
 Variable:T -> .
 CarriageControl:NL
403 LET C=INT(100*C+.5)/100 
 Variable:C -> .
 NumericValue:100
 Variable:C -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
405 PRINT "TOTAL CASH ASSETS ARE    $";C
 TextValue:"TOTAL CASH ASSETS ARE    $"
 CarriageControl:;
 Variable:C -> .
 CarriageControl:NL
407 LET D=INT(100*D+.5)/100 
 Variable:D -> .
 NumericValue:100
 Variable:D -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
408 PRINT "TOTAL ASSETS ARE         $";D
 TextValue:"TOTAL ASSETS ARE         $"
 CarriageControl:;
 Variable:D -> .
 CarriageControl:NL
410 PRINT 
 CarriageControl:NL
411 IF X9=0 THEN 416
 Variable:X9 -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:416
412 PRINT "DO YOU WISH TO CONTINUE (YES-TYPE 1, NO-TYPE 0)";
 TextValue:"DO YOU WISH TO CONTINUE (YES-TYPE 1, NO-TYPE 0)"
 CarriageControl:;
413 INPUT Q9
 Variable:Q9 -> .
414 IF Q9<1 THEN 998
 Variable:Q9 -> .
 NumericValue:1
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:998
416 REM INPUT TRANSACTIONS 
 Remark:INPUT TRANSACTIONS 
420 PRINT "WHAT IS YOUR TRANSACTION IN" 
 TextValue:"WHAT IS YOUR TRANSACTION IN"
 CarriageControl:NL
430 PRINT "IBM";
 TextValue:"IBM"
 CarriageControl:;
440 INPUT Z(1)
 NumericValue:1
 Variable:Z(.) -> .
450 PRINT "RCA";
 TextValue:"RCA"
 CarriageControl:;
460 INPUT Z(2)
 NumericValue:2
 Variable:Z(.) -> .
470 PRINT "LBJ";
 TextValue:"LBJ"
 CarriageControl:;
480 INPUT Z(3)
 NumericValue:3
 Variable:Z(.) -> .
490 PRINT "ABC";
 TextValue:"ABC"
 CarriageControl:;
500 INPUT Z(4)
 NumericValue:4
 Variable:Z(.) -> .
510 PRINT "CBS";
 TextValue:"CBS"
 CarriageControl:;
520 INPUT Z(5)
 NumericValue:5
 Variable:Z(.) -> .
525 PRINT 
 CarriageControl:NL
530 REM TOTAL DAY'S PURCHASES IN $:P5
 Remark:TOTAL DAY'S PURCHASES IN $:P5
540 LET P5=0
 Variable:P5 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
550 REM TOTAL DAY'S SALES IN $:S5
 Remark:TOTAL DAY'S SALES IN $:S5
560 LET S5=0
 Variable:S5 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
570 FOR I=1 TO 5
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:5"]
575 LET Z(I)=INT(Z(I)+.5) 
 Variable:I -> .
 Variable:Z(.) -> .
 Variable:I -> .
 Variable:Z(.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
580 IF Z(I)<=0 THEN 610 
 Variable:I -> .
 Variable:Z(.) -> .
 NumericValue:0
 BinaryOperatorLessEqual:<=(.,.) -> ?
 LineNumber:610
590 LET P5=P5+Z(I)*S(I) 
 Variable:P5 -> .
 Variable:P5 -> .
 Variable:I -> .
 Variable:Z(.) -> .
 Variable:I -> .
 Variable:S(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
600 GOTO 620 
 LineNumber:620
610 LET S5=S5-Z(I)*S(I) 
 Variable:S5 -> .
 Variable:S5 -> .
 Variable:I -> .
 Variable:Z(.) -> .
 Variable:I -> .
 Variable:S(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
612 IF -Z(I)<=P(I) THEN 620 
 Variable:I -> .
 Variable:Z(.) -> .
 UnaryOperatorMinus:-(.) -> .
 Variable:I -> .
 Variable:P(.) -> .
 BinaryOperatorLessEqual:<=(.,.) -> ?
 LineNumber:620
614 PRINT "YOU HAVE OVERSOLD A STOCK; TRY AGAIN." 
 TextValue:"YOU HAVE OVERSOLD A STOCK; TRY AGAIN."
 CarriageControl:NL
616 GOTO 420 
 WARNING: Transfer in/out of FOR/NEXT 420
 LineNumber:420
620 NEXT I
 Variable:I -> .
622 REM TOTAL VALUE OF TRANSACTIONS:T5 
 Remark:TOTAL VALUE OF TRANSACTIONS:T5 
625 LET T5=P5+S5
 Variable:T5 -> .
 Variable:P5 -> .
 Variable:S5 -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
630 REM BROKERAGE FEE:B5 
 Remark:BROKERAGE FEE:B5 
640 LET B5=INT(.01*T5*100+.5)/100 
 Variable:B5 -> .
 NumericValue:.01
 Variable:T5 -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:100
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
650 REM CASH ASSETS=OLD CASH ASSETS-TOTAL PURCHASES
 Remark:CASH ASSETS=OLD CASH ASSETS-TOTAL PURCHASES
652 REM -BROKERAGE FEES+TOTAL SALES:C5 
 Remark:-BROKERAGE FEES+TOTAL SALES:C5 
654 LET C5=C-P5-B5+S5 
 Variable:C5 -> .
 Variable:C -> .
 Variable:P5 -> .
 BinaryOperatorMinus:-(.,.) -> .
 Variable:B5 -> .
 BinaryOperatorMinus:-(.,.) -> .
 Variable:S5 -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
656 IF C5>=0 THEN 674 
 Variable:C5 -> .
 NumericValue:0
 BinaryOperatorGreaterEqual:>=(.,.) -> ?
 LineNumber:674
658 PRINT "YOU HAVE USED $";-C5;" MORE THAN YOU HAVE." 
 TextValue:"YOU HAVE USED $"
 CarriageControl:;
 Variable:C5 -> .
 UnaryOperatorMinus:-(.) -> .
 CarriageControl:;
 TextValue:" MORE THAN YOU HAVE."
 CarriageControl:NL
660 GOTO 420
 LineNumber:420
674 LET C=C5
 Variable:C -> .
 Variable:C5 -> .
 AssignmentOperator:= . -> .
675 REM CALCULATE NEW PORTFOLIO  
 Remark:CALCULATE NEW PORTFOLIO  
680 FOR I=1 TO 5
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:5"]
690 LET P(I)=P(I)+Z(I)
 Variable:I -> .
 Variable:P(.) -> .
 Variable:I -> .
 Variable:P(.) -> .
 Variable:I -> .
 Variable:Z(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
700 NEXT I
 Variable:I -> .
710 REM CALCULATE NEW STOCK VALUES 
 Remark:CALCULATE NEW STOCK VALUES 
720 GOSUB 830 
 LineNumber:830
750 REM PRINT PORTFOLIO
 Remark:PRINT PORTFOLIO
751 REM BELL RINGING-DIFFERENT ON MANY COMPUTERS 
 Remark:BELL RINGING-DIFFERENT ON MANY COMPUTERS 
755 PRINT 
 CarriageControl:NL
756 PRINT "**********     END OF DAY'S TRADING     **********"
 TextValue:"**********     END OF DAY'S TRADING     **********"
 CarriageControl:NL
757 PRINT 
 CarriageControl:NL
758 PRINT 
 CarriageControl:NL
759 IF X9<1 THEN 769
 Variable:X9 -> .
 NumericValue:1
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:769
769 PRINT "STOCK","PRICE/SHARE","HOLDINGS", "VALUE", "NET PRICE CHANGE"
 TextValue:"STOCK"
 CarriageControl:,
 TextValue:"PRICE/SHARE"
 CarriageControl:,
 TextValue:"HOLDINGS"
 CarriageControl:,
 TextValue:"VALUE"
 CarriageControl:,
 TextValue:"NET PRICE CHANGE"
 CarriageControl:NL
770 PRINT "IBM", S(1), P(1), S(1)*P(1), C(1)
 TextValue:"IBM"
 CarriageControl:,
 NumericValue:1
 Variable:S(.) -> .
 CarriageControl:,
 NumericValue:1
 Variable:P(.) -> .
 CarriageControl:,
 NumericValue:1
 Variable:S(.) -> .
 NumericValue:1
 Variable:P(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 CarriageControl:,
 NumericValue:1
 Variable:C(.) -> .
 CarriageControl:NL
771 PRINT "RCA", S(2), P(2), S(2)*P(2), C(2)
 TextValue:"RCA"
 CarriageControl:,
 NumericValue:2
 Variable:S(.) -> .
 CarriageControl:,
 NumericValue:2
 Variable:P(.) -> .
 CarriageControl:,
 NumericValue:2
 Variable:S(.) -> .
 NumericValue:2
 Variable:P(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 CarriageControl:,
 NumericValue:2
 Variable:C(.) -> .
 CarriageControl:NL
772 PRINT "LBJ", S(3), P(3), S(3)*P(3), C(3)
 TextValue:"LBJ"
 CarriageControl:,
 NumericValue:3
 Variable:S(.) -> .
 CarriageControl:,
 NumericValue:3
 Variable:P(.) -> .
 CarriageControl:,
 NumericValue:3
 Variable:S(.) -> .
 NumericValue:3
 Variable:P(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 CarriageControl:,
 NumericValue:3
 Variable:C(.) -> .
 CarriageControl:NL
773 PRINT "ABC", S(4), P(4), S(4)*P(4), C(4)
 TextValue:"ABC"
 CarriageControl:,
 NumericValue:4
 Variable:S(.) -> .
 CarriageControl:,
 NumericValue:4
 Variable:P(.) -> .
 CarriageControl:,
 NumericValue:4
 Variable:S(.) -> .
 NumericValue:4
 Variable:P(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 CarriageControl:,
 NumericValue:4
 Variable:C(.) -> .
 CarriageControl:NL
774 PRINT "CBS", S(5), P(5), S(5)*P(5), C(5)
 TextValue:"CBS"
 CarriageControl:,
 NumericValue:5
 Variable:S(.) -> .
 CarriageControl:,
 NumericValue:5
 Variable:P(.) -> .
 CarriageControl:,
 NumericValue:5
 Variable:S(.) -> .
 NumericValue:5
 Variable:P(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 CarriageControl:,
 NumericValue:5
 Variable:C(.) -> .
 CarriageControl:NL
775 LET X9=1
 Variable:X9 -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
780 PRINT 
 CarriageControl:NL
790 PRINT 
 CarriageControl:NL
810 GOTO 360 
 LineNumber:360
829 REM NEW STOCK VALUES - SUBROUTINE
 Remark:NEW STOCK VALUES - SUBROUTINE
830 REM RANDOMLY PRODUCE NEW STOCK VALUES BASED ON PREVIOUS
 Remark:RANDOMLY PRODUCE NEW STOCK VALUES BASED ON PREVIOUS
831 REM DAY'S VALUES 
 Remark:DAY'S VALUES 
832 REM N1,N2 ARE RANDOM NUMBERS OF DAYS WHICH RESPECTIVELY
 Remark:N1,N2 ARE RANDOM NUMBERS OF DAYS WHICH RESPECTIVELY
833 REM DETERMINE WHEN STOCK I1 WILL INCREASE 10 PTS. AND STOCK
 Remark:DETERMINE WHEN STOCK I1 WILL INCREASE 10 PTS. AND STOCK
834 REM I2 WILL DECREASE 10 PTS. 
 Remark:I2 WILL DECREASE 10 PTS. 
840 REM IF N1 DAYS HAVE PASSED, PICK AN I1, SET E1, DETERMINE NEW N1 
 Remark:IF N1 DAYS HAVE PASSED, PICK AN I1, SET E1, DETERMINE NEW N1 
841 IF N1>0 THEN 850
 WARNING: GOSUB length exceeds limit 40
 Variable:N1 -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:850
845 LET I1=INT(4.99*RND(X)+1) 
 Variable:I1 -> .
 NumericValue:4.99
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
846 LET N1=INT(4.99*RND(X)+1) 
 Variable:N1 -> .
 NumericValue:4.99
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
847 LET E1=1
 Variable:E1 -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
850 REM IF N2 DAYS HAVE PASSED, PICK AN I2, SET E2, DETERMINE NEW N2 
 Remark:IF N2 DAYS HAVE PASSED, PICK AN I2, SET E2, DETERMINE NEW N2 
851 IF N2>0 THEN 860
 Variable:N2 -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:860
855 LET I2=INT(4.99*RND(X)+1) 
 Variable:I2 -> .
 NumericValue:4.99
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
856 LET N2=INT(4.99*RND(X)+1) 
 Variable:N2 -> .
 NumericValue:4.99
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
857 LET E2=1
 Variable:E2 -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
860 REM DEDUCT ONE DAY FROM N1 AND N2
 Remark:DEDUCT ONE DAY FROM N1 AND N2
861 LET N1=N1-1 
 Variable:N1 -> .
 Variable:N1 -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
862 LET N2=N2-1 
 Variable:N2 -> .
 Variable:N2 -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
890 REM LOOP THROUGH ALL STOCKS
 Remark:LOOP THROUGH ALL STOCKS
900 FOR I=1 TO 5
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:5"]
910 LET X1=RND(X) 
 Variable:X1 -> .
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 AssignmentOperator:= . -> .
915 IF X1>.25 THEN 920
 Variable:X1 -> .
 NumericValue:.25
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:920
916 LET X1=.25
 Variable:X1 -> .
 NumericValue:.25
 AssignmentOperator:= =. -> .
917 GOTO 935 
 LineNumber:935
920 IF X1>.5 THEN 925
 Variable:X1 -> .
 NumericValue:.5
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:925
921 LET X1=.5
 Variable:X1 -> .
 NumericValue:.5
 AssignmentOperator:= =. -> .
922 GOTO 935 
 LineNumber:935
925 IF X1>.75 THEN 930
 Variable:X1 -> .
 NumericValue:.75
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:930
926 LET X1=.75  
 Variable:X1 -> .
 NumericValue:.75
 AssignmentOperator:= =. -> .
927 GOTO 935 
 LineNumber:935
930 LET X1=0.0
 Variable:X1 -> .
 NumericValue:0.0
 AssignmentOperator:= =. -> .
931 REM BIG CHANGE CONSTANT:W3  (SET TO ZERO INITIALLY)
 Remark:BIG CHANGE CONSTANT:W3  (SET TO ZERO INITIALLY)
935 LET W3=0
 Variable:W3 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
936 IF E1<1 THEN 945
 Variable:E1 -> .
 NumericValue:1
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:945
937 IF INT(I1+.5)<>INT(I+.5) THEN 945 
 Variable:I1 -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 Variable:I -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:945
938 REM ADD 10 PTS. TO THIS STOCK;  RESET E1 
 Remark:ADD 10 PTS. TO THIS STOCK;  RESET E1 
939 LET W3=10 
 Variable:W3 -> .
 NumericValue:10
 AssignmentOperator:= =. -> .
943 LET E1=0
 Variable:E1 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
945 IF E2<1 THEN 955
 Variable:E2 -> .
 NumericValue:1
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:955
947 IF INT(I2+.5)<>INT(I+.5) THEN 955 
 Variable:I2 -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 Variable:I -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:955
948 REM SUBTRACT 10 PTS. FROM THIS STOCK;  RESET E2
 Remark:SUBTRACT 10 PTS. FROM THIS STOCK;  RESET E2
949 LET W3=W3-10
 Variable:W3 -> .
 Variable:W3 -> .
 NumericValue:10
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
953 LET E2=0
 Variable:E2 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
954 REM C(I) IS CHANGE IN STOCK VALUE
 Remark:C(I) IS CHANGE IN STOCK VALUE
955 LET C(I)=INT(A*S(I))+X1+INT(3-6*RND(X)+.5)+W3 
 Variable:I -> .
 Variable:C(.) -> .
 Variable:A -> .
 Variable:I -> .
 Variable:S(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 FunctionInt:INT(.) -> .
 Variable:X1 -> .
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:3
 NumericValue:6
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:W3 -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
956 LET C(I)=INT(100*C(I)+.5)/100 
 Variable:I -> .
 Variable:C(.) -> .
 NumericValue:100
 Variable:I -> .
 Variable:C(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
957 LET S(I)=S(I)+C(I)
 Variable:I -> .
 Variable:S(.) -> .
 Variable:I -> .
 Variable:S(.) -> .
 Variable:I -> .
 Variable:C(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
960 IF S(I)>0 THEN 967
 Variable:I -> .
 Variable:S(.) -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:967
964 LET C(I)=0
 Variable:I -> .
 Variable:C(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
965 LET S(I)=0
 Variable:I -> .
 Variable:S(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
966 GOTO 970 
 LineNumber:970
967 LET S(I)=INT(100*S(I)+.5)/100 
 Variable:I -> .
 Variable:S(.) -> .
 NumericValue:100
 Variable:I -> .
 Variable:S(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
970 NEXT I
 Variable:I -> .
972 REM AFTER T8 DAYS RANDOMLY CHANGE TREND SIGN AND SLOPE 
 Remark:AFTER T8 DAYS RANDOMLY CHANGE TREND SIGN AND SLOPE 
973 LET T8=T8-1 
 Variable:T8 -> .
 Variable:T8 -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
974 IF T8<1 THEN 985
 Variable:T8 -> .
 NumericValue:1
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:985
980 RETURN
 
985 REM RANDOMLY CHANGE TREND SIGN AND SLOPE (A), AND DURATION 
 Remark:RANDOMLY CHANGE TREND SIGN AND SLOPE (A), AND DURATION 
986 REM OF TREND (T8)
 Remark:OF TREND (T8)
990 LET T8=INT(4.99*RND(X)+1) 
 Variable:T8 -> .
 NumericValue:4.99
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
992 LET A=INT((RND(X)/10)*100+.5)/100 
 Variable:A -> .
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 NumericValue:10
 BinaryOperatorDivide:/(.,.) -> .
 NumericValue:100
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:.5
 BinaryOperatorPlus:+(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 AssignmentOperator:= . -> .
993 LET S4=RND(X) 
 Variable:S4 -> .
 Variable:X -> .
 FunctionRnd:RND(.) -> .
 AssignmentOperator:= . -> .
994 IF S4<=.5 THEN 997
 Variable:S4 -> .
 NumericValue:.5
 BinaryOperatorLessEqual:<=(.,.) -> ?
 LineNumber:997
995 LET A=-A
 Variable:A -> .
 Variable:A -> .
 UnaryOperatorMinus:-(.) -> .
 AssignmentOperator:= . -> .
997 RETURN
 
998 PRINT "HOPE YOU HAD FUN!!"
 TextValue:"HOPE YOU HAD FUN!!"
 CarriageControl:NL
999 END
 

